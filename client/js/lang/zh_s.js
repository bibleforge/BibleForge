/**
 * BibleForge
 *
 * @date    03-16-13
 * @version alpha (α)
 * @link    http://BibleForge.com
 * @license The MIT License (MIT)
 */

/*!
 * The BibleForge motto:
 *
 * "all things whatsoever ye would that men should do to you, do ye even so to them."
 *     —Jesus (Matthew 7:12)
 */

/*!
 * Copyright (C) 2021
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * “Software”), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so.
 *
 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/// Set JSHint options.
// jshint bitwise:true, curly:true, eqeqeq:true, forin:true, immed:true, latedef:true, newcap:true, noarg:true, noempty:true, nonew:true, onevar:true, plusplus:true, quotmark:double, strict:true, undef:true, unused:strict, browser:true

/**
 * Create the BibleForge language specific object for the English language.
 *
 * @param  that (object) The global used to attach the code to.
 * @note   The object that is created is used by main.js to preform language specific operations.
 * @return NULL.  Attaches an object containing language specific functions and variables to the global BF object.
 */
(function (that)
{
    "use strict";
    
    /// This analysis data is used to segment Chinese characters.
    /// Created in the Forge on Wed, 23 Oct 2013 17:45:44 GMT.
    /// Analysis
    var analysis = {"一":{L:81,R:19,M:1},"万":{R:44,L:56,M:1},"下":{R:59,L:41,M:1},"世":{R:62,L:38,M:1},"两":{R:11,L:89,M:1},"个":{R:78,L:22,M:1},"中":{R:49,L:51,M:1},"举":{R:40,L:60,M:1},"书":{R:74,L:26,M:1},"了":{R:91,L:9,M:1},"事":{R:88,L:12,M:1},"些":{R:76,L:24,M:1},"交":{R:45,L:55,M:1},"亩":{R:1},"亮":{R:78,L:22},"人":{R:71,L:29,M:1},"代":{R:61,L:39,M:1},"件":{R:89,L:11,M:1},"任":{R:50,L:50,M:1},"伙":{R:80,L:20},"会":{R:57,L:43,M:1},"位":{R:94,L:6},"体":{R:56,L:44,M:1},"例":{R:90,L:10},"倍":{R:89,L:11},"党":{R:67,L:33},"共":{R:25,L:75,M:1},"出":{R:56,L:44,M:1},"刀":{R:72,L:28,M:1},"分":{R:53,L:47,M:1},"切":{R:37,L:63,M:1},"到":{R:74,L:26,M:1},"刻":{R:64,L:36,M:1},"动":{R:77,L:23},"匹":{R:67,L:33},"十":{R:29,L:71,M:1},"千":{R:43,L:57,M:1},"半":{R:55,L:45,M:1},"卷":{R:67,L:33},"去":{R:68,L:32,M:1},"双":{R:10,L:90},"发":{R:37,L:63,M:1},"变":{R:36,L:64},"口":{R:67,L:33,M:1},"句":{R:83,L:17,M:1},"只":{R:26,L:74,M:1},"台":{R:67,L:33},"同":{R:24,L:76,M:1},"名":{R:71,L:29,M:1},"听":{R:51,L:49},"吹":{R:29,L:71,M:1},"味":{R:1},"和":{R:51,L:49,M:1},"响":{R:43,L:57},"回":{R:53,L:47,M:1},"团":{R:67,L:33},"国":{R:66,L:34},"圈":{R:60,L:40},"地":{R:69,L:31,M:1},"场":{R:80,L:20},"坐":{R:53,L:47},"块":{R:79,L:21,M:1},"城":{R:69,L:31},"堆":{R:53,L:47},"声":{R:84,L:16,M:1},"壶":{R:1},"处":{R:80,L:20,M:1},"夜":{R:56,L:44,M:1},"大":{R:25,L:75,M:1},"天":{R:56,L:44,M:1},"头":{R:76,L:24,M:1},"套":{R:55,L:45},"女":{R:56,L:44,M:1},"子":{R:84,L:16,M:1},"字":{R:73,L:27,M:1},"存":{R:63,L:38},"宗":{R:60,L:40},"定":{R:56,L:44,M:1},"家":{R:63,L:37,M:1},"宿":{R:1},"对":{R:44,L:56,M:1},"小":{R:21,L:79,M:1},"层":{R:77,L:23,M:1},"展":{R:63,L:38},"山":{R:50,L:50,M:1},"岁":{R:85,L:15},"带":{R:51,L:49,M:1},"席":{R:90,L:10},"帮":{R:58,L:42},"幅":{R:1},"年":{R:64,L:36,M:1},"并":{R:7,L:93,M:1},"座":{R:71,L:29},"开":{R:50,L:50,M:1},"张":{R:53,L:47},"律":{R:67,L:33,M:1},"心":{R:56,L:44,M:1},"想":{R:56,L:44,M:1},"意":{R:73,L:27,M:1},"手":{R:67,L:33},"把":{R:48,L:52,M:1},"掌":{R:50,L:50},"排":{R:60,L:40,M:1},"提":{R:21,L:79,M:1},"摸":{R:50,L:50,M:1},"支":{R:71,L:29},"放":{R:31,L:69},"整":{R:22,L:78,M:1},"文":{R:60,L:40},"斤":{R:1},"新":{R:41,L:59},"方":{R:58,L:42,M:1},"旁":{R:54,L:46},"族":{R:70,L:30},"日":{R:62,L:38,M:1},"时":{R:53,L:47,M:1},"是":{R:63,L:37,M:1},"更":{R:23,L:77},"月":{R:66,L:34,M:1},"望":{R:69,L:31,M:1},"本":{R:39,L:61,M:1},"朵":{R:1},"村":{R:43,L:57},"条":{R:73,L:27,M:1},"来":{R:72,L:28,M:1},"杯":{R:50,L:50,M:1},"枝":{R:70,L:30},"查":{R:47,L:53},"树":{R:64,L:36,M:1},"样":{R:83,L:17,M:1},"根":{R:67,L:33},"棵":{R:60,L:40,M:1},"概":{R:50,L:50},"次":{R:83,L:17,M:1},"歇":{R:40,L:60},"步":{R:67,L:33},"死":{R:66,L:34,M:1},"段":{R:1},"比":{R:54,L:46,M:1},"满":{R:47,L:53,M:1},"滴":{R:43,L:57},"点":{R:58,L:42,M:1},"片":{R:67,L:33},"物":{R:84,L:16,M:1},"献":{R:64,L:36},"班":{R:73,L:27,M:1},"瓶":{R:75,L:25},"生":{R:58,L:42,M:1},"画":{R:43,L:57},"番":{R:63,L:38},"百":{R:33,L:67,M:1},"盆":{R:60,L:40},"直":{R:30,L:70},"看":{R:48,L:52,M:1},"碰":{R:50,L:50},"离":{R:31,L:69},"种":{R:69,L:31},"程":{R:67,L:33},"空":{R:39,L:61,M:1},"站":{R:45,L:55},"等":{R:52,L:48},"箭":{R:80,L:20,M:1},"篇":{R:1},"篮":{R:67,L:33},"类":{R:88,L:13},"粒":{R:1},"经":{R:52,L:48,M:1},"群":{R:63,L:38,M:1},"股":{R:1},"般":{R:80,L:20,M:1},"行":{R:78,L:22,M:1},"袋":{R:1,M:1},"见":{R:78,L:22,M:1},"觉":{R:56,L:44},"角":{R:85,L:15,M:1},"言":{R:78,L:22,M:1},"试":{R:38,L:62},"说":{R:69,L:31,M:1},"起":{R:70,L:30,M:1},"路":{R:76,L:24,M:1},"身":{R:63,L:37,M:1},"轮":{R:46,L:54},"辆":{R:83,L:17,M:1},"边":{R:82,L:18,M:1},"过":{R:60,L:40,M:1},"进":{R:74,L:26,M:1},"连":{R:29,L:71,M:1},"通":{R:38,L:62},"遇":{R:64,L:36},"遍":{R:58,L:42},"道":{R:72,L:28,M:1},"门":{R:66,L:34,M:1},"闪":{R:29,L:71},"间":{R:84,L:16},"队":{R:85,L:15},"阵":{R:64,L:36},"霎":{R:33,L:67,M:1},"面":{R:68,L:32,M:1},"颗":{R:1},"首":{R:63,L:37,M:1},"齐":{R:54,L:46,M:1},"丁":{L:29,R:71},"当":{R:42,L:58,M:1},"税":{R:70,L:30},"七":{L:73,R:27,M:1},"公":{R:36,L:64,M:1},"星":{R:45,L:55},"军":{R:59,L:41},"多":{R:38,L:63,M:1},"幸":{R:67,L:33},"恶":{R:41,L:59,M:1},"户":{R:76,L:24,M:1},"有":{R:40,L:60,M:1},"灵":{R:33,L:67},"象":{R:44,L:56,M:1},"达":{R:65,L:35},"邦":{R:67,L:33,M:1},"丈":{L:50,R:50,M:1},"夫":{R:64,L:36,M:1},"量":{R:59,L:41},"三":{L:77,R:23,M:1},"反":{R:16,L:84},"四":{R:17,L:83,M:1},"王":{R:43,L:57},"甲":{R:67,L:33,M:1},"舍":{R:55,L:45},"鉴":{R:1},"上":{L:52,R:48,M:1},"主":{R:49,L:51},"也":{R:27,L:73,M:1},"传":{R:32,L:68},"作":{R:52,L:48,M:1},"佳":{R:50,L:50},"供":{R:33,L:67},"信":{R:67,L:33,M:1},"停":{R:25,L:75,M:1},"像":{R:70,L:30},"光":{R:63,L:37},"册":{R:50,L:50},"写":{R:45,L:55},"冠":{R:50,L:50},"列":{R:44,L:56,M:1},"前":{R:38,L:62,M:1},"加":{R:36,L:64,M:1},"包":{R:38,L:62},"升":{R:20,L:80},"印":{R:43,L:57},"却":{R:22,L:78},"古":{R:57,L:43,M:1},"合":{R:45,L:55,M:1},"向":{R:59,L:41},"告":{R:61,L:39,M:1},"品":{R:75,L:25},"哪":{R:54,L:46,M:1},"唇":{R:1},"图":{R:56,L:44},"坡":{R:1},"奏":{R:75,L:25},"好":{R:50,L:50,M:1},"将":{R:65,L:35,M:1},"就":{R:22,L:78,M:1},"岸":{R:89,L:11},"差":{R:63,L:37,M:1},"帝":{R:20,L:80,M:1},"干":{R:48,L:52,M:1},"平":{R:42,L:58,M:1},"床":{R:71,L:29,M:1},"弦":{R:75,L:25},"愚":{R:18,L:82},"成":{R:72,L:28,M:1},"房":{R:64,L:36,M:1},"才":{R:33,L:67,M:1},"打":{R:35,L:65},"报":{R:50,L:50},"指":{R:44,L:56,M:1},"操":{R:25,L:75},"春":{R:33,L:67},"昼":{R:67,L:33},"服":{R:75,L:25,M:1},"朝":{R:36,L:64},"木":{R:44,L:56,M:1},"板":{R:86,L:14},"楼":{R:58,L:42},"水":{R:53,L:47,M:1},"油":{R:50,L:50,M:1},"流":{R:59,L:41,M:1},"源":{R:89,L:11},"火":{R:51,L:49},"用":{R:64,L:36,M:1},"的":{R:98,L:2,M:1},"盖":{R:41,L:59},"相":{R:34,L:66,M:1},"知":{R:68,L:32,M:1},"石":{R:71,L:29,M:1},"祭":{R:56,L:44,M:1},"秤":{R:1},"穹":{R:50,L:50},"端":{R:67,L:33},"第":{R:7,L:93},"算":{R:56,L:44,M:1},"粪":{R:40,L:60},"罪":{R:59,L:41,M:1},"肢":{R:75,L:25,M:1},"脑":{R:33,L:67},"脸":{R:82,L:18},"腾":{R:80,L:20},"膛":{R:1},"船":{R:63,L:38},"节":{R:82,L:18},"衣":{R:80,L:20,M:1},"表":{R:63,L:38},"装":{R:39,L:61},"论":{R:68,L:32,M:1},"谕":{R:67,L:33},"越":{R:42,L:58,M:1},"车":{R:70,L:30,M:1},"还":{R:29,L:71,M:1},"造":{R:56,L:44,M:1},"都":{R:30,L:70,M:1},"闩":{R:1},"院":{R:50,L:50},"除":{R:47,L:53},"鞋":{R:80,L:20},"香":{R:46,L:54},"马":{R:51,L:49,M:1},"令":{R:67,L:33,M:1},"伏":{R:64,L:36},"余":{R:50,L:50,M:1},"保":{R:48,L:52},"儿":{R:90,L:10,M:1},"吧":{R:1},"垂":{R:29,L:71},"妻":{R:85,L:15},"尘":{R:43,L:57},"得":{R:67,L:33,M:1},"拜":{R:78,L:22},"榻":{R:1},"毒":{R:42,L:58,M:1},"泉":{R:40,L:60},"海":{R:40,L:60},"网":{R:67,L:33},"脚":{R:63,L:38,M:1},"落":{R:72,L:28},"蛋":{R:67,L:33},"诏":{R:50,L:50},"贱":{R:80,L:20},"跪":{R:20,L:80},"里":{R:68,L:32,M:1},"铺":{R:22,L:78},"锅":{R:40,L:60},"问":{R:82,L:18},"降":{R:41,L:59},"雨":{R:79,L:21},"雪":{R:60,L:40,M:1},"雹":{R:67,L:33},"不":{L:85,R:15,M:1},"为":{R:52,L:48,M:1},"久":{R:78,L:22},"义":{R:60,L:40,M:1},"乏":{R:67,L:33},"买":{R:52,L:48},"乱":{R:75,L:25,M:1},"争":{R:29,L:71},"亏":{R:33,L:67},"以":{R:44,L:56,M:1},"休":{R:43,L:57},"伤":{R:73,L:27},"但":{R:7,L:93,M:1},"住":{R:80,L:20},"使":{R:54,L:46,M:1},"依":{R:50,L:50},"便":{R:33,L:67},"倒":{R:50,L:50,M:1},"偏":{R:21,L:79},"免":{R:42,L:58},"入":{R:55,L:45},"全":{R:23,L:77,M:1},"关":{R:39,L:61,M:1},"再":{R:9,L:91},"冷":{R:36,L:64},"准":{R:67,L:33},"减":{R:50,L:50},"利":{R:56,L:44,M:1},"办":{R:78,L:22},"单":{R:19,L:81},"卖":{R:47,L:53,M:1},"厌":{R:50,L:50,M:1},"及":{R:45,L:55,M:1},"取":{R:51,L:49,M:1},"受":{R:37,L:63,M:1},"叫":{R:69,L:31},"可":{R:26,L:74,M:1},"吃":{R:47,L:53,M:1},"吝":{R:33,L:67},"善":{R:43,L:57,M:1},"喜":{R:50,L:50,M:1},"喝":{R:36,L:64,M:1},"在":{R:62,L:38,M:1},"坏":{R:73,L:27},"备":{R:56,L:44,M:1},"复":{R:40,L:60,M:1},"外":{R:49,L:51,M:1},"够":{R:63,L:38,M:1},"失":{R:48,L:52},"如":{R:29,L:71,M:1},"嫁":{R:38,L:63},"孝":{R:25,L:75},"学":{R:52,L:48,M:1},"守":{R:45,L:55,M:1},"安":{R:35,L:65,M:1},"宜":{R:1},"实":{R:51,L:49,M:1},"审":{R:43,L:57},"宣":{R:11,L:89},"容":{R:56,L:44,M:1},"少":{R:61,L:39,M:1},"尽":{R:70,L:30},"居":{R:59,L:41},"屈":{R:63,L:38},"常":{R:38,L:62,M:1},"应":{R:42,L:58},"强":{R:32,L:68},"归":{R:50,L:50},"很":{R:35,L:65},"必":{R:40,L:60,M:1},"忍":{R:31,L:69,M:1},"忘":{R:20,L:80,M:1},"忠":{R:17,L:83},"快":{R:49,L:51,M:1},"怕":{R:63,L:37},"思":{R:47,L:53},"急":{R:52,L:48},"息":{R:90,L:10,M:1},"悔":{R:83,L:17},"悦":{R:1},"情":{R:67,L:33,M:1},"惜":{R:1},"惧":{R:80,L:20},"惯":{R:50,L:50},"愿":{R:67,L:33},"懂":{R:60,L:40},"懈":{R:50,L:50},"扬":{R:75,L:25},"抱":{R:25,L:75},"抵":{R:40,L:60},"拘":{R:17,L:83},"拿":{R:38,L:62,M:1},"按":{R:24,L:76},"掉":{R:63,L:37},"接":{R:33,L:67,M:1},"收":{R:25,L:75},"改":{R:31,L:69},"敌":{R:38,L:62},"救":{R:36,L:64},"敢":{R:63,L:38,M:1},"敬":{R:59,L:41},"料":{R:85,L:15},"断":{R:58,L:42},"早":{R:38,L:62},"明":{R:49,L:51,M:1},"曾":{R:29,L:71},"朽":{R:25,L:75},"杀":{R:71,L:29},"止":{R:71,L:29},"正":{R:40,L:60,M:1},"求":{R:49,L:51},"治":{R:63,L:38},"沾":{R:20,L:80},"法":{R:58,L:42},"洁":{R:80,L:20},"洗":{R:21,L:79,M:1},"深":{R:32,L:68},"清":{R:29,L:71,M:1},"灭":{R:67,L:33,M:1},"热":{R:62,L:38},"然":{R:92,L:8,M:1},"照":{R:47,L:53},"熟":{R:44,L:56,M:1},"爱":{R:53,L:47,M:1},"犯":{R:52,L:48},"独":{R:24,L:76},"理":{R:61,L:39,M:1},"甘":{R:22,L:78,M:1},"甚":{R:36,L:64},"由":{R:73,L:27},"畏":{R:67,L:33},"留":{R:42,L:58,M:1},"疑":{R:77,L:23},"痛":{R:64,L:36},"登":{R:43,L:57},"着":{R:82,L:18,M:1},"睡":{R:41,L:59,M:1},"短":{R:75,L:25},"破":{R:59,L:41},"禁":{R:67,L:33},"称":{R:63,L:37,M:1},"移":{R:56,L:44,M:1},"穿":{R:23,L:77},"答":{R:71,L:29},"管":{R:62,L:38},"精":{R:17,L:83},"累":{R:55,L:45},"给":{R:72,L:28,M:1},"绝":{R:47,L:53},"缺":{R:33,L:67,M:1},"美":{R:42,L:58,M:1},"耐":{R:29,L:71,M:1},"肯":{R:60,L:40},"胜":{R:78,L:22,M:1},"能":{R:52,L:48,M:1},"脱":{R:38,L:63},"致":{R:50,L:50,M:1},"花":{R:56,L:44,M:1},"虚":{R:18,L:82},"衰":{R:13,L:88},"被":{R:51,L:49},"要":{R:34,L:66,M:1},"解":{R:55,L:45},"计":{R:80,L:20,M:1},"认":{R:29,L:71},"让":{R:47,L:53},"许":{R:61,L:39,M:1},"识":{R:58,L:42,M:1},"该":{R:43,L:57},"语":{R:95,L:5},"败":{R:60,L:40},"赐":{R:58,L:42},"赚":{R:25,L:75},"走":{R:50,L:50,M:1},"足":{R:75,L:25,M:1},"跌":{R:50,L:50},"跟":{R:48,L:52},"跳":{R:14,L:86},"转":{R:33,L:68,M:1},"轻":{R:25,L:75,M:1},"辞":{R:67,L:33},"远":{R:54,L:46,M:1},"迟":{R:50,L:50},"退":{R:47,L:53},"透":{R:75,L:25},"配":{R:30,L:70},"醒":{R:73,L:27},"重":{R:52,L:48,M:1},"错":{R:61,L:39},"长":{R:48,L:52,M:1},"随":{R:17,L:83,M:1},"露":{R:64,L:36,M:1},"静":{R:69,L:31},"靠":{R:68,L:32},"顺":{R:38,L:62},"顾":{R:60,L:40},"食":{R:81,L:19,M:1},"饶":{R:33,L:67},"饿":{R:50,L:50},"高":{R:39,L:61,M:1},"与":{L:45,R:55,M:1},"他":{R:53,L:47,M:1},"你":{R:53,L:47,M:1},"其":{R:55,L:45,M:1},"君":{R:70,L:30},"商":{R:38,L:63},"她":{R:69,L:31,M:1},"属":{R:57,L:43},"我":{R:37,L:63,M:1},"此":{R:62,L:38,M:1},"炭":{R:75,L:25},"非":{R:56,L:44,M:1},"丑":{L:1},"陋":{R:1},"专":{L:75,R:25},"权":{R:59,L:41},"且":{L:57,R:43},"自":{R:17,L:83,M:1},"俗":{R:78,L:22},"务":{R:50,L:50},"界":{R:94,L:6,M:1},"丛":{L:60,R:40},"杂":{R:50,L:50},"林":{R:67,L:33,M:1},"东":{L:70,R:30,M:1},"亚":{R:48,L:52,M:1},"至":{R:29,L:71,M:1},"西":{R:34,L:66,M:1},"风":{R:48,L:52,M:1},"丝":{L:1},"毫":{R:33,L:67,M:1},"绸":{R:50,L:50},"丢":{L:1},"弃":{R:79,L:21},"眼":{R:66,L:34,M:1},"翼":{R:1},"腿":{R:75,L:25},"舌":{R:67,L:33},"难":{R:56,L:44,M:1},"严":{L:70,R:30},"刑":{R:75,L:25,M:1},"厉":{R:50,L:50},"密":{R:53,L:47},"紧":{R:43,L:57,M:1},"肃":{R:33,L:67},"霜":{R:1},"丧":{L:67,R:33},"亡":{R:91,L:9},"命":{R:77,L:23,M:1},"气":{R:72,L:28,M:1},"胆":{R:60,L:40},"兴":{R:61,L:39},"原":{R:25,L:75},"坚":{R:7,L:93},"尊":{R:38,L:63,M:1},"废":{R:50,L:50},"建":{R:54,L:46},"招":{R:18,L:82},"数":{R:79,L:21,M:1},"最":{R:12,L:88},"极":{R:48,L:52},"果":{R:52,L:48,M:1},"波":{R:27,L:73},"派":{R:59,L:41},"游":{R:33,L:67,M:1},"焦":{R:67,L:33},"立":{R:51,L:49,M:1},"背":{R:31,L:69,M:1},"腹":{R:71,L:29},"藏":{R:59,L:41},"街":{R:50,L:50,M:1},"裂":{R:69,L:31},"观":{R:69,L:31},"选":{R:42,L:58,M:1},"金":{R:48,L:52},"丰":{L:83,R:17,M:1},"富":{R:22,L:78,M:1},"盛":{R:64,L:36},"肥":{R:7,L:93},"裕":{R:1},"临":{L:73,R:27},"产":{R:59,L:41,M:1},"终":{R:31,L:69},"近":{R:61,L:39},"业":{R:1},"乐":{R:55,L:45,M:1},"什":{R:11,L:89,M:1},"从":{R:45,L:55},"何":{R:26,L:74,M:1},"先":{R:42,L:58,M:1},"后":{R:48,L:52,M:1},"妙":{R:1},"它":{R:43,L:57},"官":{R:67,L:33},"害":{R:79,L:21,M:1},"师":{R:89,L:11},"念":{R:71,L:29},"替":{R:25,L:75},"每":{R:14,L:86},"民":{R:51,L:49,M:1},"盼":{R:33,L:67},"祷":{R:80,L:20},"耻":{R:83,L:17},"荣":{R:40,L:60},"证":{R:62,L:38,M:1},"谁":{R:31,L:69},"辅":{R:33,L:67},"亲":{R:28,L:72,M:1},"嘱":{R:67,L:33},"妇":{R:87,L:13},"宰":{R:57,L:43},"教":{R:69,L:31},"母":{R:77,L:23,M:1},"臣":{R:63,L:38},"谋":{R:47,L:53},"运":{R:38,L:62},"领":{R:31,L:69},"哀":{R:19,L:81},"枪":{R:50,L:50},"目":{R:57,L:43},"荐":{R:1},"乃":{L:75,R:25},"缦":{R:1},"已":{R:39,L:61},"诚":{R:64,L:36},"之":{L:75,R:25,M:1},"二":{R:28,L:72,M:1},"内":{R:53,L:47,M:1},"初":{R:50,L:50,M:1},"力":{R:77,L:23,M:1},"势":{R:79,L:21,M:1},"恩":{R:52,L:48,M:1},"所":{R:40,L:60,M:1},"父":{R:50,L:50},"神":{R:68,L:32,M:1},"约":{R:53,L:48},"苦":{R:51,L:49},"辈":{R:1},"乌":{L:1},"兰":{R:1},"拉":{R:40,L:60,M:1},"鸦":{R:1},"黑":{R:55,L:45,M:1},"龟":{R:1},"倦":{R:1},"困":{R:38,L:62,M:1},"器":{R:78,L:22},"园":{R:53,L:47},"欢":{R:37,L:63,M:1},"歌":{R:73,L:27},"祸":{R:75,L:25},"乖":{L:75,R:25},"僻":{R:75,L:25},"巧":{R:54,L:46,M:1},"谬":{R:75,L:25},"乘":{L:67,R:33},"九":{L:69,R:31,M:1},"因":{R:53,L:47,M:1},"太":{R:29,L:71,M:1},"无":{R:17,L:83,M:1},"未":{R:29,L:71,M:1},"没":{R:55,L:45,M:1},"请":{R:21,L:79},"习":{L:67,R:33},"练":{R:75,L:25},"乡":{L:60,R:40,M:1},"谈":{R:86,L:14},"呈":{R:33,L:67},"记":{R:50,L:50,M:1},"价":{R:75,L:25},"战":{R:41,L:59,M:1},"窜":{R:1},"乳":{L:83,R:17},"养":{R:50,L:50},"哺":{R:50,L:50},"吗":{R:94,L:6},"结":{R:45,L:55},"吵":{R:50,L:50},"斗":{R:57,L:43},"竞":{R:1},"讼":{R:67,L:33},"辩":{R:40,L:60},"闹":{R:1},"奉":{R:33,L:67},"于":{L:23,R:77,M:1},"田":{R:54,L:46},"诸":{R:13,L:88},"损":{R:55,L:45},"欠":{R:60,L:40},"负":{R:63,L:38,M:1},"云":{L:43,R:57},"彩":{R:33,L:67},"柱":{R:70,L:30},"肩":{R:40,L:60},"雾":{R:67,L:33},"互":{L:1},"五":{L:66,R:34,M:1},"六":{R:32,L:68,M:1},"脏":{R:67,L:33},"谷":{R:58,L:42,M:1},"井":{L:20,R:80},"亘":{L:1},"伦":{R:1},"伯":{R:80,L:20,M:1},"克":{R:25,L:75},"述":{R:50,L:50,M:1},"那":{R:14,L:86,M:1},"微":{R:62,L:38,M:1},"羊":{R:52,L:48,M:1},"付":{R:67,L:33},"往":{R:50,L:50},"托":{R:50,L:50},"易":{R:78,L:22,M:1},"纳":{R:46,L:54},"亥":{L:1},"亨":{L:50,R:50,M:1},"享":{L:50,R:50},"福":{R:69,L:31},"京":{L:67,R:33},"亭":{L:50,R:50},"友":{R:67,L:33,M:1},"嘴":{R:67,L:33,M:1},"姊":{R:50,L:50},"待":{R:75,L:25},"戚":{R:1},"眷":{R:43,L:57},"笔":{R:75,L:25},"耳":{R:53,L:47,M:1},"亵":{L:1},"慢":{R:71,L:29,M:1},"渎":{R:1},"们":{R:1,M:1},"众":{R:64,L:36},"参":{R:50,L:50},"呢":{R:92,L:8},"啊":{R:83,L:17},"形":{R:50,L:50},"徒":{R:63,L:37},"性":{R:60,L:40,M:1},"擦":{R:17,L:83},"格":{R:33,L:67},"烟":{R:50,L:50,M:1},"牧":{R:25,L:75,M:1},"皆":{R:50,L:50},"肉":{R:70,L:30},"肌":{R:1},"膏":{R:75,L:25,M:1},"迎":{R:14,L:86},"骂":{R:71,L:29},"么":{R:1,M:1},"仁":{L:67,R:33},"慈":{R:33,L:67},"仅":{L:75,R:25},"仆":{L:33,R:67},"役":{R:83,L:17},"仇":{L:43,R:57,M:1},"恨":{R:75,L:25},"今":{L:60,R:40,M:1},"介":{L:1,M:1},"仍":{L:93,R:7},"旧":{R:45,L:55},"吉":{R:14,L:86},"宽":{R:14,L:86},"江":{R:50,L:50},"祖":{R:40,L:60,M:1},"这":{R:11,L:89,M:1},"酒":{R:66,L:34,M:1},"龙":{R:57,L:43},"仓":{L:50,R:50},"库":{R:64,L:36},"仔":{L:1},"细":{R:45,L:55,M:1},"又":{R:20,L:80},"境":{R:67,L:33},"总":{R:11,L:89},"竟":{R:33,L:67},"仗":{L:50,R:50},"赖":{R:1},"典":{R:50,L:50},"遵":{R:13,L:88},"凭":{R:56,L:44},"北":{R:47,L:53},"南":{R:47,L:53,M:1},"撒":{R:24,L:76,M:1},"示":{R:70,L:30},"诺":{R:1},"防":{R:38,L:63},"仪":{L:33,R:67},"仰":{L:83,R:17},"慕":{R:78,L:22},"值":{R:1},"钱":{R:73,L:27},"银":{R:44,L:56,M:1},"职":{R:63,L:38},"仿":{L:50,R:50},"伊":{L:1},"甸":{R:50,L:50,M:1},"伍":{L:33,R:67},"兵":{R:77,L:23,M:1},"伐":{L:50,R:50},"寡":{R:43,L:57},"伴":{R:1},"堂":{R:88,L:13},"悟":{R:80,L:20},"聚":{R:31,L:69},"飞":{R:16,L:84,M:1},"话":{R:83,L:17,M:1},"送":{R:31,L:69,M:1},"痕":{R:50,L:50},"估":{L:1},"伸":{L:90,R:10},"冤":{R:60,L:40},"延":{R:50,L:50},"诉":{R:67,L:33,M:1},"伺":{L:50,R:50},"候":{R:77,L:23},"似":{L:71,R:29},"乎":{R:1,M:1},"低":{L:58,R:42,M:1},"洼":{R:67,L:33,M:1},"宅":{R:67,L:33},"态":{R:1},"恤":{R:75,L:25},"沉":{R:18,L:82},"统":{R:29,L:71},"谅":{R:50,L:50},"质":{R:86,L:14},"贴":{R:25,L:75},"验":{R:86,L:14,M:1},"况":{R:67,L:33},"妨":{R:50,L:50},"尝":{R:67,L:33},"罗":{R:41,L:59,M:1},"剩":{R:75,L:25,M:1},"闲":{R:55,L:45},"假":{R:33,L:67,M:1},"别":{R:50,L:50,M:1},"劳":{R:58,L:42,M:1},"孽":{R:1},"客":{R:36,L:64},"工":{R:63,L:37,M:1},"摩":{R:33,L:67,M:1},"梦":{R:38,L:63,M:1},"歹":{R:80,L:20},"活":{R:43,L:57,M:1},"礼":{R:47,L:53,M:1},"诗":{R:57,L:43},"真":{R:24,L:76,M:1},"若":{R:15,L:85},"佩":{L:1},"剑":{R:1},"戴":{R:44,L:56},"佯":{L:1},"偶":{R:57,L:43},"音":{R:79,L:21},"唤":{R:75,L:25,M:1},"怒":{R:65,L:35},"智":{R:50,L:50,M:1},"者":{R:95,L:5},"侄":{L:1},"侍":{L:50,R:50},"卫":{R:27,L:73,M:1},"侧":{L:60,R:40},"侮":{L:1},"辱":{R:80,L:20},"侵":{L:83,R:17},"占":{R:40,L:60},"吞":{R:50,L:50},"夺":{R:60,L:40},"溺":{R:1},"罢":{R:40,L:60},"蒙":{R:42,L:58},"俊":{L:1},"秀":{R:33,L:67},"俏":{L:1},"佑":{R:1},"护":{R:40,L:60,M:1},"状":{R:80,L:20},"障":{R:1},"修":{L:75,R:25},"筑":{R:40,L:60},"补":{R:50,L:50},"饰":{R:83,L:17},"俯":{L:83,R:17},"察":{R:71,L:29,M:1},"俱":{L:1},"俸":{L:50,R:50},"禄":{R:1},"卧":{R:67,L:33},"嚼":{R:25,L:75},"塌":{R:40,L:60},"毙":{R:1},"牙":{R:67,L:33,M:1},"倘":{L:1},"或":{R:23,L:77},"倚":{L:1},"借":{L:1},"债":{R:80,L:20},"贷":{R:1},"倾":{L:1},"覆":{R:1,M:1},"充":{R:38,L:63},"冒":{R:13,L:88},"斜":{R:1},"邪":{R:30,L:70},"做":{L:42,R:58,M:1},"泊":{R:1},"健":{L:33,R:67},"壮":{R:47,L:53},"偷":{L:86,R:14},"盗":{R:67,L:33},"窃":{R:1},"偿":{L:1},"傍":{L:1},"晚":{R:60,L:40,M:1},"催":{L:75,R:25},"促":{R:1},"赶":{R:10,L:90},"逼":{R:40,L:60},"傲":{L:17,R:83},"貌":{R:1,M:1},"儹":{L:1},"孙":{R:73,L:27,M:1},"允":{L:67,R:33},"元":{L:83,R:17,M:1},"始":{R:71,L:29,M:1},"帅":{R:1},"兄":{L:30,R:70,M:1},"弟":{R:78,L:22},"饥":{R:33,L:67},"兆":{L:25,R:75},"找":{R:38,L:63,M:1},"攻":{R:39,L:61},"锋":{R:50,L:50},"华":{R:29,L:71},"显":{R:33,L:67},"景":{R:67,L:33},"润":{R:1},"滑":{R:50,L:50,M:1},"秃":{R:25,L:75},"耀":{R:67,L:33},"辉":{R:50,L:50},"阴":{R:33,L:67},"制":{R:61,L:39},"己":{R:83,L:17,M:1},"斯":{R:90,L:10,M:1},"兑":{L:1},"换":{R:46,L:54},"兔":{L:1},"土":{R:54,L:46},"圣":{R:16,L:84},"室":{R:70,L:30},"宫":{R:47,L:53},"帐":{R:57,L:43},"牢":{R:30,L:70},"营":{R:82,L:18},"迷":{R:27,L:73,M:1},"骨":{R:63,L:37},"副":{R:33,L:67},"省":{R:45,L:55},"八":{L:82,R:18,M:1},"侯":{R:1},"判":{R:38,L:63,M:1},"厅":{R:1},"牛":{R:39,L:61},"畜":{R:50,L:50},"涉":{R:1},"系":{R:63,L:38},"锁":{R:44,L:56},"闭":{R:38,L:63},"旺":{R:1},"具":{L:25,R:75},"章":{R:67,L:33},"籍":{R:50,L:50},"育":{R:67,L:33},"兼":{L:1},"兽":{L:25,R:75},"屋":{R:57,L:43},"忧":{R:36,L:64},"监":{R:36,L:64},"竖":{R:25,L:75},"设":{R:29,L:71,M:1},"冈":{L:50,R:50},"陵":{R:67,L:33},"娶":{R:44,L:56},"添":{R:67,L:33},"讲":{R:56,L:44},"险":{R:67,L:33,M:1},"冕":{L:50,R:50},"旒":{R:1},"完":{R:50,L:50,M:1},"旅":{R:1},"旗":{R:43,L:57},"械":{R:1},"农":{L:75,R:25},"冬":{L:67,R:33},"夏":{R:57,L:43},"冰":{L:67,R:33},"冲":{L:73,R:27},"决":{L:1},"冶":{L:1},"炼":{R:71,L:29},"淡":{R:33,L:67},"凄":{L:1},"凉":{R:44,L:56},"惨":{R:75,L:25},"绳":{R:60,L:40},"凋":{L:1},"残":{R:22,L:78},"谢":{R:64,L:36},"凌":{L:67,R:33},"凑":{L:1},"凝":{L:1},"几":{L:68,R:32,M:1},"凡":{L:88,R:12},"据":{R:64,L:36},"凯":{L:1},"凳":{L:1},"凶":{L:1},"暴":{R:38,L:63,M:1},"猛":{R:29,L:71},"凸":{L:1},"奇":{R:25,L:75,M:1},"尖":{R:25,L:75},"巡":{R:20,L:80},"征":{R:50,L:50,M:1},"担":{R:40,L:60},"捐":{R:14,L:86},"汗":{R:25,L:75},"现":{R:27,L:73,M:1},"线":{R:78,L:22},"聘":{R:40,L:60},"蓝":{R:40,L:60},"血":{R:31,L:69},"谜":{R:50,L:50},"货":{R:75,L:25},"鞘":{R:1},"击":{L:60,R:40,M:1},"毁":{R:70,L:30},"碎":{R:82,L:18},"凿":{L:1},"刺":{R:60,L:40},"封":{R:29,L:71},"岔":{R:50,L:50},"散":{R:62,L:38,M:1},"赃":{R:50,L:50},"辨":{R:33,L:67},"割":{R:33,L:67},"齿":{R:1},"杖":{R:50,L:50},"罚":{R:86,L:14},"划":{L:67,R:33},"刚":{L:92,R:8},"勇":{R:44,L:56},"愎":{R:1},"硬":{R:67,L:33},"创":{L:75,R:25},"速":{R:56,L:44},"删":{L:1},"案":{R:75,L:25},"刨":{L:1},"挖":{R:14,L:86},"基":{R:29,L:71,M:1},"率":{R:80,L:20},"益":{R:78,L:22,M:1},"刮":{L:1},"底":{R:67,L:33,M:1},"期":{R:60,L:40},"老":{R:23,L:78,M:1},"部":{R:1},"度":{R:75,L:25,M:1},"草":{R:64,L:36,M:1},"剃":{L:1},"削":{L:1},"弱":{R:1},"戏":{R:30,L:70},"略":{R:56,L:44,M:1},"震":{R:50,L:50},"额":{R:33,L:67},"驱":{R:50,L:50},"剖":{L:1},"剥":{L:75,R:25},"皮":{R:45,L:55,M:1},"剧":{L:1},"剪":{L:83,R:17},"毛":{R:60,L:40},"劈":{L:1},"柴":{R:1},"劝":{L:67,R:33},"勉":{R:50,L:50},"化":{R:64,L:36},"导":{R:1},"慰":{R:67,L:33},"戒":{R:67,L:33},"功":{L:33,R:67},"效":{R:50,L:50},"增":{R:40,L:60},"沙":{R:33,L:67},"摇":{R:17,L:83},"助":{L:20,R:80},"推":{R:8,L:92},"努":{L:1},"劬":{L:1},"励":{L:33,R:67},"碌":{R:67,L:33},"勃":{L:1},"士":{R:82,L:18,M:1},"勒":{L:62,R:38,M:1},"索":{R:78,L:22},"赎":{R:33,L:67,M:1},"追":{R:14,L:86},"勤":{L:50,R:50},"勾":{L:1},"引":{R:39,L:61,M:1},"括":{R:1},"袱":{R:1},"裹":{R:50,L:50},"匉":{L:1},"訇":{R:1},"匕":{L:1},"匣":{L:1},"匪":{L:1},"医":{L:57,R:43},"午":{L:86,R:14,M:1},"饭":{R:67,L:33,M:1},"截":{R:1},"腰":{R:36,L:64},"载":{R:83,L:17},"丽":{R:1,M:1},"联":{R:20,L:80},"协":{L:1},"卑":{L:83,R:17},"摆":{R:13,L:88},"弄":{R:78,L:22,M:1},"博":{L:1},"卜":{R:1},"卡":{L:1},"危":{L:1},"即":{L:88,R:13},"刃":{R:1},"卸":{L:75,R:25},"历":{L:86,R:14,M:1},"史":{R:25,L:75,M:1},"压":{L:65,R:35},"榨":{R:1},"烦":{R:44,L:56},"厕":{L:50,R:50},"厚":{L:67,R:33},"抓":{R:50,L:50,M:1},"疾":{R:83,L:17,M:1},"叉":{L:40,R:60},"邻":{R:33,L:67},"臂":{R:1},"叛":{R:60,L:40},"咬":{R:18,L:82},"咒":{R:57,L:43},"威":{R:29,L:71},"愤":{R:50,L:50},"慌":{R:50,L:50,M:1},"抖":{R:67,L:33},"昏":{R:18,L:82},"暗":{R:29,L:71,M:1},"烧":{R:19,L:81},"狂":{R:38,L:62},"电":{R:75,L:25},"痒":{R:1},"白":{R:36,L:64,M:1},"笑":{R:58,L:42,M:1},"红":{R:41,L:59,M:1},"绿":{R:50,L:50},"胀":{R:1},"臭":{R:40,L:60},"芽":{R:1},"誓":{R:80,L:20},"财":{R:70,L:30,M:1},"软":{R:67,L:33},"酵":{R:1},"酸":{R:50,L:50},"青":{R:27,L:73},"颤":{R:1},"黄":{R:22,L:78},"叔":{L:75,R:25},"暖":{R:67,L:33},"寒":{R:57,L:43},"惊":{R:27,L:73},"灾":{R:25,L:75,M:1},"穷":{R:50,L:50},"窘":{R:67,L:33},"训":{R:29,L:71},"责":{R:62,L:38},"贿":{R:33,L:67},"色":{R:86,L:14,M:1},"迁":{R:20,L:80},"逆":{R:50,L:50},"渴":{R:56,L:44},"粮":{R:67,L:33},"巴":{R:31,L:69,M:1},"米":{R:63,L:38},"另":{L:1},"叩":{L:1},"喊":{R:56,L:44},"召":{L:20,R:80},"怜":{R:43,L:57},"悲":{R:40,L:60},"憎":{R:33,L:67},"欺":{R:20,L:80,M:1},"鄙":{R:50,L:50},"阶":{R:1},"叱":{L:1},"右":{L:73,R:27,M:1},"叶":{L:1,M:1},"号":{L:46,R:54},"呼":{R:42,L:58},"咷":{R:1},"哭":{R:64,L:36},"筒":{R:1},"司":{L:64,R:36},"狱":{R:1,M:1},"叹":{L:40,R:60,M:1},"叼":{L:1},"奶":{R:50,L:50},"素":{R:33,L:67},"饱":{R:29,L:71,M:1},"鱼":{R:58,L:42,M:1},"各":{L:85,R:15,M:1},"式":{R:1},"适":{R:1},"吊":{L:1,M:1},"僚":{R:1},"埋":{R:44,L:56},"射":{R:13,L:88},"盟":{R:75,L:25},"录":{R:1},"誉":{R:1},"嗣":{R:1},"妃":{R:50,L:50},"檐":{R:1},"盾":{R:50,L:50},"裔":{R:1},"吐":{L:67,R:33,M:1},"穗":{R:80,L:20},"左":{R:10,L:90},"吓":{L:40,R:60},"啬":{R:1},"噬":{R:1},"否":{L:50,R:50},"吩":{L:1},"咐":{R:1},"含":{L:1},"羞":{R:44,L:56,M:1},"闻":{R:78,L:22},"启":{L:1},"嚷":{R:75,L:25},"吸":{L:1},"饮":{R:67,L:33},"嘘":{R:50,L:50},"笛":{R:1},"吼":{L:67,R:33},"诫":{R:1},"呐":{L:1},"呕":{L:1},"喃":{R:1},"周":{L:1},"围":{R:20,L:80},"咆":{L:1},"哮":{R:1},"哄":{R:50,L:50},"奸":{R:50,L:50},"宝":{R:41,L:59,M:1},"熊":{R:1},"睦":{R:1},"议":{R:38,L:63},"调":{R:17,L:83},"雅":{R:67,L:33},"雇":{R:25,L:75},"诅":{R:1},"咸":{L:1},"咽":{L:1},"哉":{R:1},"恸":{R:50,L:50},"鸣":{R:80,L:20},"骗":{R:60,L:40},"哈":{L:82,R:18},"尼":{R:60,L:40,M:1},"萨":{R:60,L:40},"哑":{L:75,R:25},"哥":{L:75,R:25,M:1},"德":{R:64,L:36,M:1},"泣":{R:1},"哲":{L:67,R:33},"唯":{L:1},"恐":{R:33,L:67},"唱":{L:71,R:29},"唾":{L:1},"沫":{R:67,L:33},"埠":{R:1},"贾":{R:1},"啼":{L:1},"喂":{L:1},"良":{R:36,L:64},"喇":{L:1},"喉":{L:1},"咙":{R:1},"喘":{L:50,R:50},"筵":{R:67,L:33},"醉":{R:57,L:43,M:1},"喧":{L:1},"哗":{R:1},"喷":{L:1,M:1},"嚏":{R:1},"鼻":{R:67,L:33,M:1},"嗉":{L:1},"嗤":{L:1},"嘲":{L:1},"嘻":{L:1},"皿":{R:1},"烂":{R:1},"环":{R:60,L:40},"囊":{L:67,R:33},"囚":{L:50,R:50},"禀":{R:25,L:75},"避":{R:40,L:60},"而":{R:11,L:89,M:1},"囿":{R:1},"惫":{R:1},"墙":{R:67,L:33,M:1},"绕":{R:45,L:55},"裙":{R:50,L:50},"固":{L:67,R:33},"帑":{R:1},"圆":{L:67,R:33},"顶":{R:50,L:50,M:1},"坑":{R:67,L:33},"旨":{R:83,L:17},"殿":{R:50,L:50},"押":{R:25,L:75},"某":{R:17,L:83},"逃":{R:19,L:81},"陈":{R:29,L:71},"幔":{R:50,L:50},"洞":{R:50,L:50},"球":{R:1},"穴":{R:1},"均":{L:1},"坍":{L:1},"垫":{R:1},"坎":{R:1},"垒":{R:1},"持":{R:60,L:40,M:1},"革":{R:50,L:50},"坛":{L:25,R:75},"坟":{L:75,R:25},"墓":{R:25,L:75},"茔":{R:1},"坠":{L:1},"胎":{R:88,L:13},"坦":{L:25,R:75},"涎":{R:1},"垦":{L:50,R:50},"荒":{R:31,L:69},"埃":{L:80,R:20},"塞":{R:43,L:57,M:1},"怨":{R:33,L:67},"葬":{R:75,L:25},"池":{R:67,L:33},"邑":{R:33,L:67},"郊":{R:1},"培":{L:67,R:33},"植":{R:67,L:33},"址":{R:1},"督":{R:50,L:50,M:1},"积":{R:38,L:63},"集":{R:83,L:17},"堕":{L:1},"堵":{L:67,R:33},"陷":{R:33,L:67},"塔":{L:1},"填":{L:1},"碑":{R:1},"垣":{R:1},"壁":{R:1},"墨":{L:75,R:25},"盒":{R:67,L:33},"墩":{L:33,R:67,M:1},"壕":{L:1},"沟":{R:75,L:25},"浪":{R:63,L:38},"娃":{R:1},"患":{R:62,L:38},"甥":{R:1},"肾":{R:50,L:50},"袍":{R:50,L:50},"郭":{R:1},"愁":{R:36,L:64},"玛":{R:40,L:60},"病":{R:76,L:24,M:1},"鹰":{R:86,L:14},"寿":{R:60,L:40},"布":{R:59,L:41,M:1},"志":{R:56,L:44,M:1},"河":{R:33,L:67},"溪":{R:33,L:67},"牌":{R:80,L:20},"碗":{R:1},"翁":{R:1},"英":{R:33,L:67},"麦":{R:50,L:50},"涯":{R:1},"鹅":{R:1},"阳":{R:33,L:67},"夭":{L:1},"央":{L:1},"巾":{R:1},"挡":{R:56,L:44},"疼":{R:57,L:43},"盔":{R:50,L:50,M:1},"夸":{L:83,R:17},"奖":{R:67,L:33},"夹":{L:1},"获":{R:1,M:1},"异":{R:25,L:75},"怪":{R:50,L:50},"迹":{R:1,M:1},"承":{R:38,L:63,M:1},"奋":{L:1},"契":{L:1},"奔":{L:64,R:36,M:1},"跑":{R:30,L:70},"赏":{R:50,L:50},"奠":{L:75,R:25},"奢":{L:1},"奥":{L:50,R:50},"秘":{R:50,L:50},"婿":{R:1},"孩":{R:67,L:33,M:1},"奴":{L:1},"婢":{R:50,L:50},"妈":{R:1},"饼":{R:1},"淫":{R:40,L:60},"诈":{R:60,L:40},"施":{R:27,L:73},"泥":{R:67,L:33},"嫔":{R:1},"妄":{L:64,R:36},"妆":{L:1},"奁":{R:1},"妒":{L:67,R:33},"纷":{R:50,L:50,M:1},"妓":{L:67,R:33},"妥":{L:40,R:60},"碍":{R:75,L:25},"妹":{L:33,R:67},"妾":{R:1},"姆":{L:1},"姐":{L:1},"姑":{L:1},"姓":{L:50,R:50},"委":{L:1},"婉":{R:50,L:50},"曲":{R:1,M:1},"姨":{L:1},"武":{R:67,L:33},"娇":{L:1},"嫩":{R:60,L:40,M:1},"娘":{L:1,M:1},"娼":{L:1},"婆":{L:40,R:60},"婚":{L:1},"姻":{R:1},"婴":{L:67,R:33},"媳":{L:1},"嫂":{L:1},"嫉":{L:1},"嫌":{L:67,R:33},"隙":{R:1},"嬉":{L:1},"尚":{R:17,L:83},"弹":{R:25,L:75},"孔":{L:50,R:50},"雀":{R:50,L:50},"孕":{L:25,R:75},"孤":{L:1},"寂":{R:33,L:67},"童":{R:57,L:43},"孳":{L:1},"宁":{L:75,R:25},"宇":{L:33,R:67},"宙":{R:1},"娜":{R:1},"康":{R:33,L:67},"抚":{R:50,L:50},"稳":{R:44,L:56},"置":{R:17,L:83},"舒":{R:25,L:75},"逸":{R:67,L:33},"靖":{R:67,L:33},"毕":{R:1},"吏":{R:1},"员":{R:1},"睛":{R:1},"规":{R:36,L:64,M:1},"玉":{R:75,L:25},"贝":{R:1},"贵":{R:50,L:50},"宠":{L:50,R:50},"店":{R:33,L:67},"读":{R:50,L:50},"府":{R:80,L:20},"宴":{L:33,R:67},"僮":{R:1},"庭":{R:1},"谱":{R:67,L:33},"宏":{R:1},"广":{R:33,L:67},"恕":{R:67,L:33},"敞":{R:33,L:67},"畅":{R:67,L:33},"窄":{R:40,L:60},"阔":{R:1},"限":{R:64,L:36,M:1},"宾":{L:1},"寄":{L:1},"暑":{R:1},"寓":{L:1},"考":{R:50,L:50},"俄":{R:1,M:1},"抗":{R:50,L:50},"寻":{L:79,R:21},"访":{R:33,L:67},"崇":{R:33,L:67},"巷":{R:67,L:33},"贫":{R:38,L:63},"鸡":{R:67,L:33},"鹿":{R:1},"男":{R:15,L:85,M:1},"尔":{L:50,R:50},"搭":{R:29,L:71},"痊":{R:50,L:50},"尸":{L:83,R:17},"骸":{R:50,L:50},"尺":{L:1},"寸":{R:1},"尾":{L:50,R:50,M:1},"局":{L:50,R:50},"枉":{R:25,L:75},"膝":{R:75,L:25,M:1},"屏":{L:1},"翅":{R:50,L:50},"屡":{L:1},"寨":{R:1},"岩":{R:33,L:67},"岭":{R:67,L:33},"峰":{R:1},"崖":{R:1},"崩":{R:50,L:50},"岂":{L:1},"岛":{L:33,R:67},"岳":{L:1},"峻":{L:1},"崎":{L:1},"岖":{R:1},"崽":{L:1},"川":{L:1},"逻":{R:1},"巢":{L:50,R:50},"窝":{R:75,L:25},"匠":{R:1},"巨":{L:1},"巫":{L:1},"术":{R:86,L:14},"遣":{R:25,L:75},"巳":{L:1},"特":{R:33,L:67},"顿":{R:33,L:67},"市":{L:50,R:50},"疋":{R:1},"傅":{R:1},"希":{L:1},"腊":{R:50,L:50,M:1},"幕":{R:50,L:50},"棚":{R:83,L:17},"帕":{L:1},"帖":{L:50,R:50},"帘":{L:50,R:50},"帷":{L:1},"帽":{L:1},"净":{R:1},"折":{R:58,L:42},"旱":{R:25,L:75},"涸":{R:1},"燥":{R:67,L:33},"瘦":{R:75,L:25},"瘪":{R:1},"竭":{R:67,L:33},"预":{R:14,L:86},"幼":{R:33,L:67},"末":{R:21,L:79,M:1},"纪":{R:50,L:50},"迈":{R:1},"幻":{L:50,R:50},"影":{R:56,L:44},"幽":{L:1},"冥":{R:1},"庄":{L:60,R:40},"稼":{R:67,L:33},"庆":{L:1},"贺":{R:1},"庇":{L:25,R:75,M:1},"舱":{R:50,L:50},"庙":{L:1},"庶":{L:1},"泰":{R:1},"廉":{L:1},"廊":{L:50,R:50},"弓":{R:67,L:33},"洋":{R:67,L:33},"窗":{R:20,L:80},"箱":{R:60,L:40},"释":{R:67,L:33},"镰":{R:50,L:50},"弊":{L:1},"诱":{R:25,L:75},"琴":{R:50,L:50},"弯":{L:75,R:25,M:1},"横":{R:40,L:60},"迫":{R:80,L:20},"项":{R:80,L:20},"附":{R:17,L:83,M:1},"彰":{L:1},"彷":{L:1},"佛":{R:1},"彼":{L:1,M:1},"昔":{R:33,L:67},"返":{R:25,L:75},"徇":{L:50,R:50},"徐":{L:1},"御":{L:1},"怀":{R:31,L:69},"感":{R:56,L:44},"窍":{R:1},"肠":{R:50,L:50},"须":{R:29,L:71,M:1},"忌":{L:1},"忙":{L:33,R:67},"忤":{L:1},"虑":{R:1},"闷":{R:71,L:29,M:1},"诵":{R:50,L:50},"忽":{L:67,R:33},"忿":{L:57,R:43,M:1},"激":{R:20,L:80},"怎":{L:1,M:1},"斥":{R:67,L:33},"视":{R:1},"悯":{R:1},"躁":{R:1},"讟":{R:1},"纲":{R:1},"恋":{L:50,R:50},"恒":{L:80,R:20},"惠":{R:67,L:33},"恭":{L:1},"恰":{L:1},"恳":{L:1},"劣":{R:1},"贯":{R:1,M:1},"魔":{R:67,L:33},"恼":{L:50,R:50},"悄":{L:67,R:33,M:1},"悖":{L:1},"悬":{L:80,R:20},"挂":{R:30,L:70},"欲":{R:78,L:22},"谊":{R:1},"惶":{R:50,L:50},"讶":{R:1},"骇":{R:1},"惑":{L:29,R:71},"惩":{L:1},"惭":{L:33,R:67,M:1},"愧":{R:1},"惹":{L:75,R:25},"眉":{R:50,L:50,M:1},"愆":{L:33,R:67},"愈":{L:50,R:50},"拙":{R:1},"昧":{R:1,M:1},"蠢":{R:50,L:50},"顽":{R:33,L:67},"谨":{R:33,L:67},"慧":{L:50,R:50},"聪":{R:25,L:75},"憔":{L:1},"悴":{R:1},"怠":{R:1},"懊":{L:1},"懒":{L:1},"惰":{R:1},"懦":{L:1},"戈":{L:1},"矛":{R:1},"戍":{L:1},"玩":{R:75,L:25},"耍":{R:67,L:33},"兢":{R:1,M:1},"戥":{L:1},"戳":{L:1},"鵀":{R:1},"需":{R:50,L:50},"捧":{R:50,L:50},"艺":{R:50,L:50,M:1},"镯":{R:50,L:50},"黏":{R:50,L:50},"鼓":{R:60,L:40},"扎":{L:80,R:20},"扑":{L:1},"扫":{R:11,L:89},"扮":{R:1},"捆":{R:40,L:60},"滚":{R:33,L:67},"猎":{R:25,L:75,M:1},"盹":{R:1},"铁":{R:15,L:85},"雷":{R:40,L:60},"扔":{L:1},"扛":{L:1},"执":{L:1},"政":{R:60,L:40},"扩":{L:1},"扪":{L:1},"帚":{R:1},"扭":{L:1},"扯":{L:1},"扰":{L:40,R:60},"扶":{L:88,R:13},"犁":{R:1},"批":{L:1},"评":{R:1},"技":{L:1},"抄":{L:1},"柄":{R:75,L:25},"投":{L:1},"拒":{R:67,L:33},"叠":{R:1},"磨":{R:50,L:50},"抛":{L:1},"掷":{R:50,L:50},"锚":{R:1},"抟":{L:1},"抡":{L:1},"抢":{L:83,R:17},"掠":{R:67,L:33},"披":{L:83,R:17},"麻":{R:11,L:89},"抬":{L:71,R:29},"触":{R:50,L:50},"抹":{L:83,R:17},"抽":{L:1},"疯":{R:20,L:80},"拆":{L:1},"拇":{L:1,M:1},"疲":{R:25,L:75},"拍":{L:67,R:33},"拐":{L:1},"拔":{L:78,R:22},"拖":{L:1},"束":{R:67,L:33},"拚":{L:1},"募":{R:1},"拟":{L:1},"拢":{L:50,R:50},"拥":{L:50,R:50},"挤":{R:10,L:90},"拦":{L:1},"阻":{R:20,L:80},"择":{L:50,R:50},"拯":{L:1},"拱":{L:1},"拳":{L:67,R:33},"拷":{L:1},"拾":{L:67,R:33,M:1},"摘":{R:25,L:75},"挑":{L:89,R:11},"唆":{R:1},"窟":{R:50,L:50},"挟":{L:1},"挣":{L:1},"挨":{L:1},"挪":{L:1},"挫":{L:1},"振":{L:1},"挺":{L:1},"挽":{L:1},"禾":{R:17,L:83},"绑":{R:33,L:67},"捉":{L:75,R:25},"捏":{L:1},"赀":{R:50,L:50},"资":{R:25,L:75},"捕":{L:33,R:67},"捡":{L:1},"捣":{L:1},"捶":{L:1},"胸":{R:20,L:80},"掀":{L:1},"授":{L:1},"握":{R:1},"舵":{R:1},"掏":{L:1},"掐":{L:1},"掘":{L:1},"探":{L:75,R:25},"窥":{R:17,L:83},"掣":{L:50,R:50},"签":{R:25,L:75},"续":{R:1},"控":{L:1},"翻":{R:8,L:92},"诿":{R:1},"掩":{L:86,R:14},"蔽":{R:1},"措":{L:1},"掳":{L:1},"插":{L:1},"揣":{L:1},"揪":{L:1},"揭":{L:1},"搀":{L:1},"搂":{L:1},"搅":{L:1},"搓":{L:1},"搜":{L:1},"搬":{L:1},"携":{L:1},"渡":{R:50,L:50},"撼":{R:1},"橹":{R:1},"摔":{L:1},"跤":{R:1},"撇":{L:1},"撑":{L:1},"尿":{R:1},"盐":{R:33,L:67},"谎":{R:40,L:60,M:1},"撕":{L:1},"撞":{L:83,R:17},"锤":{R:50,L:50},"撤":{L:1},"播":{L:1},"撵":{L:1},"擅":{L:1},"擒":{L:67,R:33},"粉":{R:40,L:60},"吾":{R:1},"敛":{R:1},"殓":{R:1},"松":{R:30,L:70},"猪":{R:67,L:33},"纵":{R:20,L:80},"肆":{R:50,L:50},"故":{L:75,R:25},"敏":{L:1},"捷":{R:1},"济":{R:33,L:67,M:1},"虔":{R:33,L:67},"敲":{L:1},"敷":{L:1},"药":{R:1},"斋":{L:1},"斑":{L:67,R:33},"纹":{R:1},"鸠":{R:1},"殴":{R:50,L:50},"斧":{L:1},"斩":{L:67,R:33},"郎":{R:1},"舟":{R:1},"旋":{L:1},"螺":{R:1},"旌":{L:1},"帜":{R:1},"杆":{R:80,L:20},"奈":{R:1,M:1},"暇":{R:1},"瑕":{R:50,L:50},"疵":{R:1},"缘":{R:50,L:50,M:1},"误":{R:67,L:33},"辜":{R:33,L:67},"遮":{R:29,L:71},"既":{L:1},"晷":{R:1},"渐":{R:33,L:67,M:1},"蚀":{R:1},"晨":{R:50,L:50},"叙":{R:33,L:67},"辰":{R:1},"旷":{L:1},"野":{R:19,L:81},"昂":{L:1},"昆":{L:1},"虫":{R:70,L:30},"昌":{L:1},"晓":{R:71,L:29,M:1},"灯":{R:43,L:57},"季":{R:1},"昨":{L:1},"晒":{L:50,R:50},"餐":{R:1},"普":{L:1},"暂":{L:1},"戾":{R:1},"烈":{R:30,L:70},"虐":{R:50,L:50},"曝":{L:1},"份":{R:1},"朔":{R:1},"桂":{R:50,L:50,M:1},"机":{R:20,L:80,M:1},"漏":{R:1},"违":{R:25,L:75},"朋":{L:67,R:33,M:1},"朱":{L:1},"槛":{R:1},"轴":{R:1},"戮":{R:1},"杉":{L:1},"杏":{L:1},"材":{L:33,R:67},"杜":{L:1},"杠":{L:1},"款":{R:25,L:75},"杨":{L:50,R:50},"盘":{R:44,L:56},"缓":{R:50,L:50},"费":{R:60,L:40},"枕":{L:67,R:33,M:1},"枢":{L:50,R:50},"纽":{R:1},"枯":{L:1},"槁":{R:1},"枳":{L:1},"棘":{R:50,L:50},"枵":{L:1},"薄":{R:43,L:57,M:1},"架":{L:67,R:33},"枷":{L:1},"柁":{L:1},"梁":{R:75,L:25},"柏":{L:1},"染":{L:67,R:33},"污":{R:67,L:33},"柔":{L:83,R:17},"媚":{R:1},"柜":{L:67,R:33},"究":{R:75,L:25},"柳":{L:1},"标":{L:1},"竿":{R:1},"栋":{L:1},"栏":{L:1},"梢":{R:1},"秧":{R:50,L:50},"胶":{R:1},"荫":{R:50,L:50},"栖":{L:1},"栽":{L:1},"桅":{L:1},"桌":{L:1},"桑":{L:1},"遗":{R:13,L:88},"梯":{L:50,R:50},"梳":{L:1},"检":{L:1},"棍":{L:67,R:33},"棺":{L:1},"椅":{L:1},"椴":{L:1},"椽":{L:1},"楚":{L:20,R:80,M:1},"阁":{R:1},"榆":{L:1},"榜":{L:1},"榴":{L:33,R:67},"槽":{L:33,R:67},"模":{L:67,R:33},"范":{R:1},"橄":{L:1},"榄":{R:1,M:1},"橛":{L:1},"橡":{L:1},"檀":{L:1},"序":{R:1},"欣":{R:33,L:67},"颂":{R:40,L:60},"确":{R:29,L:71},"履":{R:1},"踏":{R:67,L:33},"歪":{L:50,R:50},"狗":{R:50,L:50},"殉":{L:1},"殡":{L:50,R:50},"殷":{L:1},"谤":{R:1},"舅":{R:1},"逢":{R:1},"蛇":{R:50,L:50},"喻":{R:1},"赛":{R:67,L:33,M:1},"较":{R:40,L:60},"织":{R:33,L:67},"毯":{L:50,R:50},"晶":{R:1},"桶":{R:1},"浇":{R:50,L:50},"潭":{R:1},"煮":{R:25,L:75},"珠":{R:60,L:40},"罐":{R:50,L:50},"臌":{R:1},"闸":{R:1},"永":{L:91,R:9},"汁":{L:50,R:50},"秽":{R:33,L:67},"汪":{L:33,R:67,M:1},"汲":{L:1},"汹":{L:1},"涌":{R:40,L:60},"吟":{R:1},"沦":{R:1},"沐":{L:1},"浴":{R:67,L:33},"迦":{R:50,L:50,M:1},"沛":{L:1},"沥":{L:1},"沧":{L:1},"漆":{R:50,L:50},"沿":{L:1},"泄":{L:1},"则":{R:1},"码":{R:50,L:50},"泛":{L:1},"溢":{R:1},"滥":{R:33,L:67},"泡":{L:33,R:67},"涛":{R:1},"泞":{R:1},"注":{L:1,M:1},"泪":{L:50,R:50},"洒":{L:1},"涤":{R:1},"澡":{R:1},"濯":{R:1},"洪":{L:1},"泼":{R:1},"脓":{R:1},"荡":{R:80,L:20},"灌":{R:50,L:50},"测":{L:75,R:25},"浑":{L:1},"浊":{R:1},"浩":{L:1},"浮":{L:60,R:40},"渣":{R:33,L:67},"湾":{R:1},"绒":{R:67,L:33},"陆":{R:50,L:50},"浸":{L:1},"涂":{L:80,R:20,M:1},"消":{L:1,M:1},"耗":{R:33,L:67},"涨":{L:1},"涮":{L:1},"淋":{L:1},"湿":{R:50,L:50},"漓":{R:1},"淤":{L:1},"浅":{R:1},"渊":{R:50,L:50},"混":{L:1},"沌":{R:1},"淹":{L:1},"渔":{L:1},"滓":{R:1},"温":{L:86,R:14},"港":{L:1},"泳":{R:1},"湖":{L:67,R:33},"溃":{L:1},"滋":{L:1},"滔":{L:67,R:33,M:1},"沸":{R:1},"盈":{R:25,L:75},"肚":{R:29,L:71},"漂":{L:1},"潦":{L:1},"澄":{L:1},"澎":{L:1},"湃":{R:1},"濠":{L:1},"瀑":{L:1},"炉":{R:57,L:43},"焚":{R:50,L:50},"焰":{R:1},"盏":{R:1},"笼":{R:67,L:33},"灰":{L:67,R:33},"魂":{R:50,L:50},"殃":{R:1},"灿":{L:1},"灶":{R:1},"炎":{L:67,R:33},"炽":{L:1},"烛":{L:1},"烤":{L:75,R:25},"琐":{R:1},"絮":{R:1},"窑":{R:50,L:50},"症":{R:1},"焉":{L:1},"焊":{L:1},"煤":{L:1},"煽":{L:1},"熄":{L:1},"熔":{L:1},"悉":{R:1},"熬":{L:1},"汤":{R:1},"燃":{L:1},"燕":{L:1},"爬":{L:1},"爵":{L:50,R:50},"爽":{L:1},"犊":{R:1},"牲":{L:67,R:33},"牵":{L:1},"牺":{L:1},"词":{R:1},"犹":{L:1},"澜":{R:1},"狐":{L:1,M:1},"狸":{R:1,M:1},"狠":{L:1},"狡":{L:1},"猾":{R:1},"狭":{L:1},"隘":{R:50,L:50},"狮":{L:1,M:1},"狼":{L:50,R:50},"猖":{L:1},"猜":{L:1},"猿":{L:1},"猴":{R:1},"玄":{L:1},"玺":{R:1},"瑙":{R:1},"玫":{L:1},"瑰":{R:1,M:1},"玷":{L:1},"玻":{L:1},"璃":{R:1},"珊":{L:1},"瑚":{R:1},"珍":{L:1},"馐":{R:1,M:1},"串":{R:1},"琥":{L:1},"珀":{R:1},"瑟":{R:1},"琵":{L:1},"琶":{R:1},"璎":{L:1},"珞":{R:1},"璧":{L:1},"瓜":{L:33,R:67},"瓦":{L:1},"瓮":{L:1},"甜":{R:25,L:75},"蔗":{R:1},"霖":{R:1},"疏":{R:50,L:50},"纸":{R:1},"甩":{L:1},"鼠":{R:1},"申":{L:1},"疆":{L:1},"疟":{L:1},"癫":{R:33,L:67},"痔":{L:1},"疮":{R:1},"痢":{L:1},"痨":{L:1},"痴":{L:1},"瘀":{L:1},"瘟":{L:50,R:50},"疫":{R:1},"瘠":{L:1},"瘤":{L:1},"瘫":{L:1},"痪":{R:1},"瘸":{L:1},"痫":{R:1},"叟":{R:1},"鹤":{R:50,L:50},"皇":{L:1},"皎":{L:1},"肤":{R:1},"皱":{L:1},"卤":{R:1},"腌":{R:1},"贼":{R:50,L:50},"睁":{R:25,L:75},"睹":{R:1,M:1},"符":{R:50,L:50},"继":{R:25,L:75},"隔":{R:38,L:63},"眨":{L:1},"瞎":{L:1},"瞒":{L:67,R:33},"瞪":{L:1},"瞭":{L:1},"瞳":{L:1},"瞻":{L:1},"矮":{L:75,R:25},"矬":{R:1},"版":{R:1},"矶":{L:1},"砍":{L:75,R:25},"砖":{L:1},"砸":{L:1},"硫":{L:1},"磺":{R:1},"碧":{L:1},"碱":{L:1},"磐":{L:1},"祀":{L:50,R:50},"祈":{L:1},"祝":{L:1},"祉":{R:1},"缝":{R:50,L:50},"禽":{L:67,R:33,M:1},"鸟":{R:63,L:38},"稭":{R:1},"私":{L:89,R:11},"秉":{L:1},"秋":{L:1},"科":{L:1},"诀":{R:1},"租":{L:1},"秦":{L:1},"攒":{R:1},"蓄":{R:50,L:50},"赞":{R:40,L:60},"稀":{L:1},"途":{R:1},"稍":{L:67,R:33},"稗":{L:1},"稠":{L:1},"穑":{R:1},"苍":{R:50,L:50,M:1},"突":{L:1},"棂":{R:1},"窿":{R:1},"笃":{L:1},"笨":{L:67,R:33},"筏":{L:1},"策":{L:1},"筛":{L:67,R:33},"筹":{L:1},"辖":{R:50,L:50},"箩":{L:1},"箴":{L:1},"篱":{L:1},"笆":{R:1},"篷":{L:1},"簸":{L:1},"箕":{R:1},"粗":{L:1},"粘":{L:1},"厂":{R:1},"饷":{R:1},"糊":{L:60,R:40},"糟":{L:1},"践":{R:67,L:33},"蹋":{R:1},"糢":{L:1},"菜":{R:67,L:33},"紫":{L:1},"赘":{R:1},"繁":{L:1},"茂":{R:33,L:67},"豆":{R:33,L:67},"旦":{R:1,M:1},"翰":{R:50,L:50},"纬":{L:1},"纯":{L:1},"谏":{R:1},"贡":{R:33,L:67},"纺":{L:1},"绊":{L:75,R:25},"予":{R:1},"驿":{R:1},"绣":{L:67,R:33},"绰":{L:67,R:33,M:1},"绵":{L:67,R:33},"蛮":{R:50,L:50},"缄":{L:1},"默":{R:30,L:70,M:1},"缆":{L:1},"编":{L:1},"缠":{L:1},"缚":{R:1},"缩":{L:67,R:33},"缸":{L:1},"罕":{L:1},"骑":{R:17,L:83},"罩":{L:1},"魁":{R:1},"羁":{L:1},"羔":{R:33,L:67,M:1},"羚":{L:1},"羡":{L:1},"羽":{L:1},"膀":{R:50,L:50},"翎":{L:1},"翡":{L:1},"翠":{R:1},"耕":{L:1},"耙":{L:50,R:50},"聋":{R:33,L:67},"耶":{L:1},"稣":{R:1,M:1},"鲁":{R:1},"耸":{L:50,R:50},"耽":{L:1},"搁":{R:1},"络":{R:1},"肋":{L:1},"脐":{R:50,L:50},"肝":{L:1},"皂":{R:1},"胖":{R:1},"肮":{L:1},"肺":{L:1},"腑":{R:1},"胃":{L:50,R:50},"怯":{R:1},"胞":{R:50,L:50},"胡":{L:1},"胳":{L:1},"赢":{R:50,L:50},"脂":{L:1},"脊":{L:1},"踢":{R:1},"脾":{L:1},"腓":{L:1},"腥":{L:1},"膳":{L:1},"恃":{R:1},"逞":{R:33,L:67},"臬":{L:1},"舀":{L:1},"鳎":{R:1},"舞":{L:67,R:33},"蹈":{R:1,M:1},"航":{L:1},"艰":{L:1},"艳":{L:1},"艾":{L:1},"芟":{L:1},"芥":{L:1},"芦":{L:67,R:33},"苇":{R:25,L:75},"荟":{R:1},"芫":{L:1},"荽":{R:1},"畦":{R:1},"苞":{R:1},"芸":{L:1},"芹":{L:1},"塘":{R:1},"蝇":{R:1},"苏":{L:1},"苗":{L:1},"苟":{L:1},"雄":{R:1},"苹":{L:1},"茅":{L:1},"茴":{L:1,M:1},"茵":{L:1},"蔯":{R:1},"荆":{L:1},"渺":{R:1},"漠":{R:1},"桨":{R:1},"荷":{L:50,R:50},"莫":{L:1},"莲":{L:1},"菖":{L:1},"蒲":{R:50,L:50},"蔬":{R:50,L:50},"萎":{L:1},"著":{L:1},"葡":{L:1,M:1},"萄":{R:1,M:1},"葫":{L:1},"蒺":{L:1},"藜":{R:1},"蓬":{L:1},"蔓":{L:1},"藉":{L:1},"匿":{R:1},"躲":{R:20,L:80},"藐":{L:1},"藤":{L:1},"藩":{L:1},"蘸":{L:1},"虎":{L:1},"蛀":{R:50,L:50},"虱":{L:1},"虼":{L:1},"蚤":{R:1},"虽":{L:1},"蚂":{L:1},"蚁":{R:1},"蚱":{R:50,L:50},"蟥":{R:1},"蚕":{L:1},"蜢":{R:1},"蛛":{L:50,R:50,M:1},"蜂":{L:80,R:20},"蜜":{R:33,L:67,M:1},"蜗":{L:1},"蜘":{L:1},"蜡":{L:1},"蝎":{L:1},"蝗":{L:1},"蝙":{L:1},"蝠":{R:1},"蝮":{L:1},"蝻":{L:1},"融":{L:1},"蠓":{L:1},"蠹":{L:1},"脉":{R:1},"李":{R:1},"踪":{R:33,L:67},"衙":{L:1},"衡":{L:1},"裳":{R:1},"襟":{R:1},"褂":{R:50,L:50},"袖":{L:50,R:50},"裤":{L:1},"褥":{L:1},"弗":{R:1,M:1},"晴":{R:1},"矩":{R:1},"觅":{L:1},"誊":{L:1},"警":{L:1},"讥":{L:1},"诮":{R:1},"讨":{L:86,R:14},"诲":{R:1},"诡":{L:1},"询":{L:1},"隐":{R:9,L:91},"详":{L:1},"诧":{L:1},"诬":{L:1},"诰":{L:1},"匀":{R:1},"羹":{R:1},"谄":{L:1},"谗":{L:1},"谣":{L:1},"谦":{L:83,R:17},"逊":{R:1},"慎":{R:1},"豁":{L:1},"荚":{R:1},"豪":{L:1},"杰":{R:1},"豹":{L:1},"豺":{L:1},"贞":{L:1},"贤":{L:1},"贩":{L:1},"贪":{L:1},"婪":{R:1},"贸":{L:1},"贻":{L:1},"赂":{R:1},"赌":{L:1},"赔":{L:1},"赠":{L:67,R:33},"赤":{L:1},"赦":{L:1},"赫":{L:1},"赴":{L:1},"逐":{R:67,L:33},"鬼":{R:67,L:33},"趁":{L:1},"超":{L:1},"趋":{L:1},"跃":{L:50,R:50},"跨":{L:1},"径":{R:1},"踊":{L:1},"蹦":{L:1},"蹲":{L:1},"躺":{L:1},"轨":{L:1},"辋":{R:1},"轰":{L:50,R:50},"蔑":{R:1},"佐":{R:1},"煌":{R:1},"辎":{L:1},"辔":{L:1},"辗":{L:1},"辛":{L:1},"驳":{R:25,L:75},"辽":{L:1},"迅":{L:1},"逾":{R:33,L:67},"钝":{R:1},"悼":{R:1},"遁":{R:1},"递":{L:1},"逝":{L:1},"遥":{L:1},"遭":{L:1},"讳":{R:1},"邀":{L:1},"郑":{L:1},"酉":{L:1},"酌":{L:1},"窖":{R:1},"醡":{R:1},"酩":{L:1},"酊":{R:1,M:1},"酬":{L:1},"醇":{L:1},"汉":{R:50,L:50},"驴":{R:67,L:33},"钉":{L:1},"钓":{L:1},"钢":{L:1},"钥":{L:1},"匙":{R:1},"钩":{L:67,R:33},"钮":{L:1},"扣":{R:1},"钳":{L:1},"链":{R:50,L:50},"镣":{R:1},"铃":{L:1},"铛":{R:1},"铜":{L:1},"钹":{R:1},"铠":{L:1},"铭":{L:1},"铮":{L:50,R:50},"铲":{L:1},"铸":{L:1},"锄":{L:1},"锥":{L:1},"锦":{L:1},"锭":{L:1},"镊":{L:1},"镌":{L:1},"镜":{L:1},"镶":{L:1},"嵌":{R:1},"扇":{R:1},"框":{R:1},"楣":{R:1},"烁":{R:1},"闯":{L:1},"闺":{L:1},"阉":{L:1},"翳":{R:1},"阿":{L:93,R:7,M:1},"爸":{R:1},"陪":{L:1},"陶":{L:1},"隆":{L:50,R:50},"雕":{L:1},"貂":{R:1},"零":{L:1,M:1},"霉":{L:1},"霸":{L:1},"霹":{L:1},"蛙":{R:1},"靶":{L:1},"鞍":{L:1},"鞭":{L:1},"顷":{L:1},"梗":{R:1},"颁":{L:1},"颜":{L:1},"颠":{L:1},"飘":{L:1},"翔":{R:1},"馑":{R:1},"饫":{R:1},"馆":{L:1},"馈":{L:1},"级":{R:1},"馨":{L:1},"蹄":{R:1},"驮":{L:1},"驯":{L:1},"驰":{L:1},"驹":{L:1,M:1},"驻":{L:1},"驼":{L:67,R:33,M:1},"驾":{L:1},"驭":{R:1},"骄":{L:1},"骆":{L:1},"骏":{L:1},"骚":{L:1},"骡":{L:1},"骼":{R:1},"髓":{R:1},"髑":{L:1},"髅":{R:1,M:1},"鬓":{L:1},"鲸":{L:1},"鳞":{L:1},"爪":{R:1},"鸬":{L:1},"鹚":{R:1},"鸵":{L:1},"鸷":{L:1},"鸽":{L:1},"鹈":{L:1},"鹕":{R:1},"鹌":{L:1},"鹑":{R:1},"鹞":{L:1},"鹧":{L:1},"鸪":{R:1},"鹭":{L:1},"鸶":{R:1},"麋":{L:1},"纱":{R:1},"黎":{L:1},"黝":{L:1},"鼫":{L:1},"鼬":{L:1},"鼹":{L:1},"旬":{M:1},"凤":{L:1},"仙":{M:1},"刽":{L:1},"吕":{L:1},"弥":{L:1},"癣":{R:1},"猫":{L:1},"蛾":{L:1},"踝":{L:1},"锡":{L:1},"浦":{M:1},"循":{L:1}},
    /// End of Analysis
        /// Created in the Forge on Wed, 23 Oct 2013 17:45:44 GMT.
        /// Plot Data
        plot_data = [{x:0,y:8187},{x:73,y:1082},{x:150,y:734},{x:329,y:428},{x:933,y:204},{x:3034,y:73},{x:8372,y:23},{x:52484,y:1}],
        /// End of Plot Data
        segment;
    
    /// In the eval context, "this" is undefined, so it needs to get the global object manually.
    /// Because this file is included immediately via <script> tags, it is not eval'ed.
    ///NOTE: Object.isFrozen() is needed for eval'ed code because the "this" object is the one from the evaler() function.
    if (typeof that === "undefined" || Object.isFrozen(that)) {
        /// Since only the browser might load the code via eval(), use the "window" object.
        that = window;
    }
    
    /// Has the BF object already been created?
    ///NOTE: "that" is "this", which is "window" in browsers and a global object in Node.js.
    ///NOTE: This also allows this code to be accessed via Node.js' require() function.
    if (!that.BF) {
        that.BF = {langs: {}};
    } else if (!that.BF.langs) {
        that.BF.langs = {};
    }
    
    /// Return the language variables and functions.
    that.BF.langs.zh_s = {
        /// Indicate that the code has been downloaded and parsed.
        loaded: true,
        
        /// Indicate the language name so it can be distinguished later.
        full_name:    "简体中文 (CKJV)",
        short_name:   "简体",
        abbreviation: "CKJV",
        id:           "zh_s",
        
        /// This is used to match the accept-language header to indicate which languages this represents.
        /// See RFC 3282: https://tools.ietf.org/html/rfc3282
        /// This matches "zh-cn" and "zh-chs".
        match_lang: /^zh-c(?:n|hs)$/i,
        
        /// Indicate that the first verse should not get special CSS.
        first_verse_normal: true,
        
        /// Use books_long_main names to create references when searching.
        use_main_title: true,
        
        /// Has this language been linked to the originals?
        linked_to_orig: false,
        
        /// Set the language's symbols.
        space: "",
        chap_separator: "：",
        ndash: "\u2014",
        
        /// Information about this particular Bible translation needed by the server.
        ///NOTE: paragraph_limit can be calculated in the Forge via find_longest_paragraph.js.
        /// The longest paragraph length plus one
        ///NOTE: One is added because it needs to find the paragraph break, which would be demarcated on the next verse when preforming an additional lookup.
        paragraph_limit:        77,
        /// The number of verses to request for a normal verse lookup (It should more than fill up the screen and not need to request more.)
        minimum_desired_verses: 77,
        
        /// Information about different sections of the Bible
        divisions: {
            ///NOTE: Currently, only the division between the Old and New Testaments is needed.
            /// Created in the Forge on Wed, 23 Oct 2013 18:08:48 GMT.
            /// New Testament Division
            nt: 390875,
            /// End of New Testament Division
        },
        
        ///NOTE: A temporary fix to let server-side code get access to these variables (since it cannot emulate all the parts to make load_dependencies() to work.
        analysis:  analysis,
        plot_data: plot_data,
        
        /**
         * Load additional data from the server.
         *
         * @param callback (function) The function to call asynchronously after all of the data is loaded.
         * @note  This is called by BF.change_language() in secondary.js.
         */
        load_dependencies: function (callback)
        {
            var context = {},
                /// Since we have multiple asynchronously tasks, let's use a cue.
                ///NOTE: BF.create_transition_cue() is created by secondary.js.  Currently, secondary.js is always loaded before other languages have a chance to be loaded.
                ///TODO: Add support for create_transition_cue() on the server.
                cue = that.BF.create_transition_cue(function completed()
                {
                    ///NOTE: context.segment() is added by zh_segment.js
                    if (context.segment) {
                        ///NOTE: The true argument sets the segmentor to Traditional Chinese.
                        segment = function (terms)
                        {
                            return context.segment(analysis, dict, plot_data, terms);
                        };
                    }
                    if (callback) {
                        callback();
                    }
                }),
                dict;
            
            /// Since the segmentation code is the same for both Simplified and Traditional Chinese (and since the dictionaries have to be downloaded any way),
            /// it makes sense to put the segmentation code in a separate, sharable file.
            cue.add({id: 0});
            ///TODO: Add support for include() on the server.
            that.BF.include("/js/misc/zh_segment.js?42eaeb94d58cad75800c56c15f6e1416", context, function onload()
            {
                cue.async_remove(0);
            });
            /// Since the dictionary is a relatively large string, it makes sense to store it in another file and download it separately (it will still be cached).
            cue.add({id: 1});
            ///TODO: Add support for Create_easy_ajax() on the server.
            (new that.BF.Create_easy_ajax()).query("GET", "/js/misc/zh_s_dict.txt?ac5680d02606bbf179a796f87ef8efbb", "", function (res)
            {
                dict = res;
                cue.async_remove(1);
            });
        },
        
        /// Book names
        books_long_main:      ["", "创世记", "出埃及记", "利未记", "民数记", "申命记", "约书亚记", "士师记", "路得记", "撒母耳记上", "撒母耳记下", "列王纪上", "列王纪下", "历代志上", "历代志下", "以斯拉记", "尼希米记", "以斯帖记", "约伯记", "诗篇", "箴言", "传道书", "雅歌", "以赛亚书", "耶利米书", "耶利米哀歌", "以西结书", "但以理书", "何西阿书", "约珥书", "阿摩司书", "俄巴底亚书", "约拿书", "弥迦书", "那鸿书", "哈巴谷书", "西番雅书", "哈该书", "撒迦利亚书", "玛拉基书", "马太福音", "马可福音", "路加福音", "约翰福音", "使徒行传", "罗马书", "哥林多前书", "哥林多后书", "加拉太书", "以弗所书", "腓立比书", "歌罗西书", "帖撒罗尼迦前书", "帖撒罗尼迦后书", "提摩太前书", "提摩太后书", "提多书", "腓利门书", "希伯来书", "雅各书", "彼得前书", "彼得后书", "约翰一书", "约翰二书", "约翰三书", "犹大书", "启示录"],
        books_long_posttitle: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""],
        books_long_pretitle:  ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""],
        books_short:          ["", "创", "出", "利", "民", "申", "书", "士", "得", "撒上", "撒下", "王上", "王下", "代上", "代下", "拉", "尼", "斯", "伯", "诗", "箴", "传", "歌", "赛", "耶", "哀", "结", "但", "何", "珥", "摩", "俄", "拿", "弥", "鸿", "哈", "番", "该", "亚", "玛", "太", "可", "路", "约", "徒", "罗", "林前", "林后", "加", "弗", "腓", "西", "帖前", "帖后", "提前", "提后", "多", "门", "来", "雅", "彼前", "彼后", "约一", "约二", "约三", "犹", "启"],
        
        /// The Hebrew alphabet (used for Psalm 119)
        hebrew_alphabet: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""],
        
        /// The number of chapters in each book of the Bible.
        ///NOTE: Genesis is index 1 (not 0).
        chapter_count: [0, 50, 40, 27, 36, 34, 24, 21, 4, 31, 24, 22, 25, 29, 36, 10, 13, 10, 42, 150, 31, 12, 8, 66, 52, 5, 48, 12, 14, 3, 9, 1, 4, 7, 3, 3, 3, 2, 14, 4, 28, 16, 24, 21, 28, 16, 16, 13, 6, 6, 4, 4, 5, 3, 6, 4, 3, 1, 13, 5, 5, 3, 5, 1, 1, 1, 22],
        
        ///TODO: Determine if texts should be categorized.
        /// Miscellaneous Text
        about:             "关于BibleForge",                                        /// Context menu item
        about_version:     "关于{v}",                                               /// Context menu item (e.g., "About KJV")
        all_lang:          "所有的语言",                                             /// The heading for language links in the footer of the non-JS version.
        app_name:          "BibleForge",                                           /// The name of the application
        biblical:          "Biblical",                                             /// The short name for the Biblical reconstructed pronunciation displayed on the menu
        biblical_pronun:   "Biblical Reconstructed Pronunciation",                 /// The long name for the Biblical reconstructed pronunciation displayed in a tooltip
        biblical_ipa:      "Biblical IPA",                                         /// The short name for the Biblical reconstructed IPA pronunciation displayed on the menu
        biblical_ipa_long: "Biblical Reconstructed IPA",                           /// The long name for the Biblical reconstructed IPA pronunciation displayed in a tooltip
        blog:              "博客",                                                  /// Context menu item
        cancel:            "取消",                                                  /// Cancel button text
        chapter:           "第{num}章",                                             /// Chapter headings
        chapter_psalm:     "第{num}首",                                             /// The title of chapters in the book of Psalms
        configure:         "形态",                                                  /// Context menu item
        contact:           "联系",                                                  /// Context menu item
        credits:           "<p>《中文英皇钦定本》（CKJV）的经文基于《和合本》，并与使用了《Textus Receptus》所翻译出来的英文圣经《英皇钦定本（King James Version）》作仔细比较然后作出修订。<p><p>更多信息请访问<a href=\"http://ckjv.asia/\" target=_blank>ckjv.asia</a>。</p><p>《中文英皇钦定本》由ckjv.asia制作，以<a href=\"http://creativecommons.org/licenses/by-sa/3.0/deed.zh\" target=_blank>创用CC姓名标示-相同方式分享3.0 Unported授权条款（CC BY-SA 3.0）</a>释出。</p>",
        detailed_def:      "Detailed Definition",                                  /// Longer, more detailed definitions caption (in larger callout)
        done:              "Done",                                                 /// The button that closes panels
        err_unknown:       "An error occurred. Please try again.",                 /// A query returned an error for an unspecified reason.
        form_email:        "电子邮件：",                                             /// On the contact panel, indicating Bibleforge's email address
        form_error:        "对不起，发生了错误。请再试一次。",                           /// An error message stating that the message was not sent properly and asking the user to try again
        form_message:      "你好……",                                                /// The placeholder for the <textarea> where the user can type a message
        form_your_email:   "电子邮件（可选）",                                        /// Input box placeholder indicating the user's email address (as optional)
        form_your_name:    "名字（可选）",                                           /// Input box placeholder indicating the user's name (as optional)
        found_plural:      "{num} verses found for <b>{q}</b>",                    /// On the info bar when searching (multiple results)
        found_singular:    "{num} verse found for <b>{q}</b>",                     /// On the info bar when searching (one result)
        "in":              "in",                                                   /// Used in the meta description in the non-JavaScript version to indicate the language being used (uncapitalized)
        ///NOTE: This key must be the same as the value in the settings.
        in_paragraphs:     "Paragraphs",                                           /// In the View configuration panel
        ///FIXME: Not all italic words are implied; some are questionable.
        italics_explanation: "This word is implied by context or required in order to translate properly; it was not translated directly from a word in the original languages.", /// When clicking on an italic word
        modern:            "Modern",                                               /// The short name for the modern pronunciation displayed on the menu
        modern_pronun:     "Modern Pronunciation",                                 /// The long name for the modern pronunciation displayed in a tooltip
        modern_ipa:        "Modern IPA",                                           /// The name for the modern IPA pronunciation displayed on the menu and tooltip
        more:              "More",                                                 /// The text for the "[+] More" button on callouts
        next_chap:         "下一章",                                                /// The next chapter link in the non-JavaScript version
        next_psalm:        "下一首",                                                /// The next psalm link in the non-JavaScript version
        night_mode:        "Night Mode",                                           /// In the View configuration panel
        no_results:        "Your search\u200A\u2014\u200A<b>{q}</b>\u200A\u2014\u200Adid not return any results.", /// Displayed when preforming a search that returns no results (NOTE: \u200A are hair spaces and \u2014 are em dashes.)
        previous_chap:     "上一章",                                                /// The previous chapter link in the non-JavaScript version
        previous_psalm:    "上一首",                                                /// The previous psalm link in the non-JavaScript version
        psalm:             "诗",                                                   /// How to reference Psalms in a reference
        query_explanation: "Keyword or Reference: \"God so loved\" or Romans 3:23",/// In a blank query input box before a search has been preformed
        query_button_title:"Click here (or press Enter)",                          /// The text displayed when hovering over the magnifying glass (query button)
        query_button_alt:  "Go",                                                   /// The text to display for the magnifying glass (query button) if images are disabled
        ///NOTE: This key must be the same as the value in the settings.
        red_letters:       "Red Letters",                                          /// In the View configuration panel
        results_for:       "Results for",                                          /// Used in the meta description of searches in the non-JavaScript version to indicate the results for the query.
        send:              "发送",                                                  /// Send a message button text
        subscription:      "subscription",                                         /// Used instead of 255 for subscripts to Paul's epistles (uncapitalized)
        title:             "title",                                                /// Used instead of 0 for Psalm title verse references (uncapitalized)
        translit:          "Transliteration",                                      /// The short name for the SBL transliteration display on the menu
        translit_long:     "Society of Biblical Languages Transliteration",        /// The long name for the SBL transliteration display on a tooltip
        unsupported:       "对不起，您使用的浏览器不被支持。请更新您的浏览器或者安装最新版本的<a href=\"https://www.mozilla.org/en-US/firefox/all/\" target=_blank>Firefox</a>或<a href=\"https://www.google.com/intl/zh-CN/chrome/browser/\" target=_blank>Chrome</a>。也可能必须启用JavaScript。",
        view:              "View",                                                 /// The title of a configuration panel
        ///TODO: Determine if the app_name should be dynamically appended to the string below or if it should be done in the build system
        wrench_title:      "Customize and Configure BibleForge",                   /// The text displayed when hovering over the wrench menu
        
        /// Grammatical Variables
        /// Grammatical search format:  WORD grammar_marker ATTRIBUTE_1 grammar_separator ATTRIBUTE_2 grammar_separator ... ATTRIBUTE_N
        /// Grammatical search example: love AS VERB, THIRD_PERSON
        /// The keyword that indicates a grammatical search.
        ///NOTE: Created in the Forge via grammar_constants_parser.php on 05-24-2012 from Grammar Constants.txt.
        grammar_keywords:   {IMPLIED: "[1,1]", DIVINE: "[2,1]", RED: "[3,1]", NOUN: "[4,1]", VERB: "[4,2]", ADJECTIVE: "[4,3]", ADVERB: "[4,4]", PRONOUN: "[4,5]", DEFINITE_ARTICLE: "[4,6]", CONJUNCTION: "[4,7]", CONDITIONAL: "[4,8]", PARTICLE: "[4,9]", PREPOSITION: "[4,10]", INJECTIVE: "[4,11]", HEBREW: "[4,12]", ARAMAIC: "[4,13]", SINGULAR: "[5,1]", PLURAL: "[5,2]", FIRST_PERSON: "[6,1]", SECOND_PERSON: "[6,2]", THIRD_PERSON: "[6,3]", PRESENT: "[7,1]", IMPERFECT: "[7,2]", FUTURE: "[7,3]", AORIST: "[7,4]", PERFECT: "[7,5]", PLUPERFECT: "[7,6]", NO_TENSE_STATED: "[7,99]", ACTIVE: "[8,1]", MIDDLE: "[8,2]", PASSIVE: "[8,3]", MIDDLE_DEPONENT: "[8,4]", PASSIVE_DEPONENT: "[8,5]", IMPERSONAL_ACTIVE: "[8,6]", AMBIGUOUS_MIDDLE_PASSIVE: "[8,77]", AMBIGUOUS_MIDDLE_PASSIVE_DEPONENT: "[8,88]", NO_VOICE_STATED: "[8,99]", INDICATIVE: "[9,1]", SUBJUNCTIVE: "[9,2]", IMPERATIVE: "[9,3]", INFINITIVE: "[9,4]", OPTATIVE: "[9,5]", PARTICIPLE: "[9,6]", IMPERATIVE_SENSE_PARTICIPLE: "[9,7]", MASCULINE: "[10,1]", FEMININE: "[10,2]", NEUTER: "[10,3]", NOMINATIVE: "[11,1]", GENITIVE: "[11,2]", ACCUSATIVE: "[11,3]", DATIVE: "[11,4]", VOCATIVE: "[11,5]", PERSONAL_PRONOUN: "[12,1]", RELATIVE_PRONOUN: "[12,2]", RECIPROCAL_PRONOUN: "[12,3]", DEMONSTRATIVE_PRONOUN: "[12,4]", CORRELATIVE_PRONOUN: "[12,5]", INTERROGATIVE_PRONOUN: "[12,6]", INDEFINITE_PRONOUN: "[12,7]", REFLEXIVE_PRONOUN: "[12,8]", POSESSIVE_PRONOUN: "[12,9]", AMBIGUOUS_CORRELATIVE_INTERROGATIVE_PRONOUN: "[12,10]", COMPARATIVE: "[13,1]", SUPERLATIVE: "[13,2]", INDECLINABLE: "[14,1]", NUMERICAL: "[15,1]", NORMAL_NOUN: "[16,1]", PROPER_NOUN: "[16,2]", LETTER: "[16,3]", OTHER: "[16,4]", ABBREVIATED: "[17,1]", CONTRACTED: "[17,2]", APOCOPATED: "[17,3]", IRREGULAR: "[17,4]", ATTIC: "[18,1]", AEOLIC: "[18,2]", TRANSITIVE: "[19,1]", FIRST_FORM: "[20,1]", SECOND_FORM: "[20,2]", INTERROGATIVE: "[21,1]", NEGATIVE: "[21,2]", PARTICLE_ATTACHED: "[21,3]", MIDDLE_SIGNIFICANCE: "[21,4]"},
        grammar_categories: ["", "implied", "divine", "red", "part_of_speech", "number", "person", "tense", "voice", "mood", "gender", "case_5", "pronoun_type", "degree", "declinability", "numerical", "noun_type", "type", "dialect", "transitivity", "form", "miscellaneous"],
        grammar_marker:     " AS ",
        grammar_marker_len: 4,   /// The length of grammar_marker.
        grammar_separator:  ",", /// The punctuation that separates two attributes.
        
        /// ****************************************
        /// * Start of Language Specific Functions *
        /// ****************************************
        
        prepare_highlighter: (function ()
        {
            /**
             * Prepare the search terms for the highlighter.
             *
             * Removes punctuation, words which should not be found in the search results, duplicate words, and converts all words to lower case
             * so that the highlighter can parse the words properly.
             *
             * @example filter_terms_for_highlighter('this one, -that one -"none of these" -"or these ones"~1 "but, these?"'); /// Returns ["this", "one", "but", "these"].
             * @param   search_terms (string) The terms to be filtered.
             * @return  An array of filtered words.
             * @note    Called by prepare_highlighter().
             * @todo    Determine if this should be moved out of the language specific file (and maybe just use some language specific variables).
             */
            function filter_terms_for_highlighter(search_terms)
            {
                var arr_len,
                    final_search_arr = [],
                    i,
                    initial_search_arr,
                    j,
                    new_arr_len = 0;
                
                /// Split up all Chinese characters.
                ///NOTE: This is because Chinese uses single ngram searching.
                ///NOTE: This uses a positive lookahead because so that it will match more than two characters in a row.
                ///      Using a lookahead, only the first character matches, so "上帝的" first matches "上", then "帝", and finally "的" to make "上 帝 的".
                ///      Without a lookahead, it would match two characters at a time, so it would match "上帝", but it would not match "的" by itself, so it would create "上 帝的".
                search_terms = search_terms.replace(/([\u4e00-\u4e35\u4e37-\u9fff\u3400-\u4dff])(?=[\u4e00-\u4e35\u4e37-\u9fff\u3400-\u4dff])/g, "$1 ");
                
                /// Remove punctuation and break up the query string into individual parts to filter out duplicates.
                /// E.g., 'in "and the earths "earths | in | earth. | "in the beginning God"' =>
                ///       ["in","\"and the earths \"","earths","in","earth","\"in the beginning god\""]
                ///NOTE: (?:^|\s)- makes sure not to filter out hyphenated words by ensuring that a hyphen must occur at the beginning or before a space to be counted as a NOT operator.
                ///NOTE: (?:"[^"]*"?|[^\s]*) matches a phrase starting with a double quote (") or a single word.
                ///NOTE: [~\/]\d* removes characters used for Sphinx query syntax.  I.e., proximity searches ("this that"~10) and quorum matching ("at least three of these"/3).
                ///NOTE: -\B removes trailing hyphens.  (This might be unnecessary.)
                ///NOTE: '(?!s\b) removes apostrophes that are not followed by an "s" and only an "s."
                ///NOTE: "[^"]+"?|[^"\s]+ is used to split the string into groups of individual words and quoted phrases.
                ///NOTE: Unterminated double quotes are treated as a phrase that ends at the end of the query, so '"unterminated quote' is treated as '"unterminated quote"'.
                initial_search_arr = search_terms.replace(/(?:(?:^|\s)-(?:"[^"]*"?|[^\s]*)|[~\/]\d*|[…，。：？！；＆｜（）［］｛｝「」『』,.:?!;&|\)\(\]\[\/\\`{}<$\^+]|-\B|'(?!s\b))/g, "").toLowerCase().match(/"[^"]+"?|[^"\s]+/g);
                
                /// Where no terms found?  If so, return an empty array.
                ///NOTE: This could happen if all of the search terms are negative (e.g., "NOT bad").
                if (!initial_search_arr) {
                    return [];
                }
                
                arr_len = initial_search_arr.length;
                                
                /// Filter out duplicates (i.e., PHP's array_unique()).
                /// E.g., ["in","\"and the earths \"","earths","in","earth","\"in the beginning god\""] =>
                ///       ["in","\"and the earths \"","earths","earth","\"in the beginning god\""]
first_loop:     for (i = 0; i < arr_len; i += 1) {
                    /// Skip empty strings.
                    
                    if (initial_search_arr[i] !== "" && initial_search_arr[i] !== "*") {
                        for (j = 0; j < new_arr_len; j += 1) {
                            if (final_search_arr[j] === initial_search_arr[i]) {
                                /// This words already exists; jump to the first loop and get the next word.
                                ///NOTE: This would be the same as "continue 2" in PHP.
                                continue first_loop;
                            }
                        }
                        final_search_arr[new_arr_len] = initial_search_arr[i];
                        new_arr_len += 1;
                    }
                }
                
                /// Loop through all of words and phrases and remove any double quotes and add to the array as individual words or arrays of words.
                /// E.g., ["in","\"and the earths \"","earths","earth","\"in the beginning god\""] =>
                ///       ["in",["and","the","earths"],"earths","earth",["in","the","beginning","god"]]
                for (i = final_search_arr.length - 1; i >= 0; i -= 1) {
                    /// Since a quotation mark might be followed or preceded by a space, make sure to remove any extra space when removing double quotes.
                    final_search_arr[i] = final_search_arr[i].replace(/\s*"\s*/g, "");
                    /// Is this a phrase (multiple words that were in double quotes)?
                    if (final_search_arr[i].indexOf(" ") !== -1) {
                        /// Add phrases as an array of individual words.
                        final_search_arr[i] = final_search_arr[i].split(" ");
                    }
                }
                
                return final_search_arr;
            }
            
            function add_regex(term)
            {
                /// Convert the asterisks to a valid regex wildcard.
                ///NOTE: Word breaks are found by looking for tag openings (<) or closings (>).
                term = term.replace(/\*/g, "[^<>]*");
                return "=([0-9]+)>[　「『（]*" + term + "[…）；：，。？！」』、丶]*<";
            }
            
            /**
             * Prepare search terms for highlighting.
             *
             * Create regex array to search through the verses that will soon be returned by the server.
             *
             * @example BF.lang.prepare_highlighter(q_obj.value);
             * @example BF.lang.prepare_highlighter("search terms");
             * @param   search_terms (string) The terms to look for.
             * @return  An array of regular expressions.
             * @note    Called by run_new_query().
             * @todo    Determine if this can be moved out of the language specific files.
             */
            return function prepare_highlighter(search_terms)
            {
                var highlight_regex = [],
                    i,
                    j,
                    search_terms_arr = filter_terms_for_highlighter(search_terms),
                    search_terms_arr_len,
                    stemmed,
                    stemmed_obj = {},
                    stemmed_tmp,
                    word_count;
                
                search_terms_arr_len = search_terms_arr.length;
                
                /// Loop through the array of words and phrases to create the regular expression.
                for (i = 0; i < search_terms_arr_len; i += 1) {
                    /// Is it a single word (it will be a string)?
                    if (typeof search_terms_arr[i] === "string") {
                        stemmed = add_regex(search_terms_arr[i]);
                        
                        word_count = 1;
                    /// If it is not a string, then it should be an array of strings.
                    } else {
                        stemmed = "";
                        word_count = search_terms_arr[i].length;
                        /// Loop through each word in the phrase to get a regular expression to highlight it and then combine it with the others.
                        for (j = word_count - 1; j >= 0; j -= 1) {
                            stemmed_tmp = add_regex(search_terms_arr[i][j]);
                            if (j > 0) {
                                /// Add a short regular expression to "glue" the regular expressions for each word together to create a regular expression for the entire phrase.
                                /// It also needs to skip over empty words (words that are just an empty HTML tag).
                                /// (?:/[^>]+>*<[^>]*)? is used to skip over HTML tags.
                                stemmed_tmp = "(?:/[^>]+>*<[^>]*)?" + stemmed_tmp;

                            }
                            /// Since we are looping backward, add it to the beginning of the string.
                            stemmed = stemmed_tmp + stemmed;
                        }
                    }
                    
                    /// Is this regular expression not a duplicate?
                    if (!stemmed_obj[stemmed]) {
                        stemmed_obj[stemmed] = true;
                        
                        highlight_regex[highlight_regex.length] = {
                            /// Create the regular expression for the phrase or word (and make it case insensitive).
                            regex: new RegExp(stemmed, "i"),
                            /// word_count is used when looping through the results of the regular expression to know how many IDs to look for.
                            word_count: word_count
                        };
                    }
                }
                
                return highlight_regex;
            };
        }()),


        /**
         * Determines the id of a verse from a reference.
         *
         * Determines if a verse is a reference and then calculates the verse id.
         * It supports various abbreviated forms as well as misspellings.
         * Only a book is required or checked for validity.
         * The verse id format is [B]BCCCVVV (e.g., Genesis 1:1 == 1001001).
         *
         * @example verse_id = determine_reference("创");               /// Returns "10001001"
         * @example verse_id = determine_reference("帖撒罗尼迦前书3：10"); /// Returns "52003010"
         * @example verse_id = determine_reference("爱");               /// Returns 0
         * @param   ref (string) The text that may or may not be a valid verse reference.
         * @return  The verse id of a reference (as a string) or the integer 0 if invalid.
         * @todo    Determine if this should return FALSE on invalid references.
         */
        determine_reference: (function ()
        {
            var books = {
                /// Simplified
                "创": 1, "出": 2, "利": 3, "民": 4, "申": 5, "书": 6, "士": 7, "得": 8, "撒上": 9, "撒下": 10, "王上": 11, "王下": 12, "代上": 13, "代下": 14, "拉": 15, "尼": 16, "斯": 17, "伯": 18, "诗": 19, "箴": 20, "传": 21, "歌": 22, "赛": 23, "耶": 24, "哀": 25, "结": 26, "但": 27, "何": 28, "珥": 29, "摩": 30, "俄": 31, "拿": 32, "弥": 33, "鸿": 34, "哈": 35, "番": 36, "该": 37, "亚": 38, "玛": 39, "太": 40, "可": 41, "路": 42, "约": 43, "徒": 44, "罗": 45, "林前": 46, "林后": 47, "加": 48, "弗": 49, "腓": 50, "西": 51, "帖前": 52, "帖后": 53, "提前": 54, "提后": 55, "多": 56, "门": 57, "来": 58, "雅": 59, "彼前": 60, "彼后": 61, "约一": 62, "约二": 63, "约三": 64, "犹": 65, "启": 66,
                "创世记": 1, "出埃及记": 2, "利未记": 3, "民数记": 4, "申命记": 5, "约书亚记": 6, "士师记": 7, "路得记": 8, "撒母耳记上": 9, "撒母耳记下": 10, "列王纪上": 11, "列王纪下": 12, "历代志上": 13, "历代志下": 14, "以斯拉记": 15, "尼希米记": 16, "以斯帖记": 17, "约伯记": 18, "诗篇": 19, "箴言": 20, "传道书": 21, "雅歌": 22, "以赛亚书": 23, "耶利米书": 24, "耶利米哀歌": 25, "以西结书": 26, "但以理书": 27, "何西阿书": 28, "约珥书": 29, "阿摩司书": 30, "俄巴底亚书": 31, "约拿书": 32, "弥迦书": 33, "那鸿书": 34, "哈巴谷书": 35, "西番雅书": 36, "哈该书": 37, "撒迦利亚书": 38, "玛拉基书": 39, "马太福音": 40, "马可福音": 41, "路加福音": 42, "约翰福音": 43, "使徒行传": 44, "罗马书": 45, "哥林多前书": 46, "哥林多后书": 47, "加拉太书": 48, "以弗所书": 49, "腓立比书": 50, "歌罗西书": 51, "帖撒罗尼迦前书": 52, "帖撒罗尼迦后书": 53, "提摩太前书": 54, "提摩太后书": 55, "提多书": 56, "腓利门书": 57, "希伯来书": 58, "雅各书": 59, "彼得前书": 60, "彼得后书": 61, "约翰一书": 62, "约翰二书": 63, "约翰三书": 64, "犹大书": 65, "启示录": 66,
                /// Traditional
                "創": 1, "書": 6, "詩": 19, "傳": 21, "賽": 23, "結": 26, "彌": 33, "鴻": 34, "該": 37, "亞": 38, "瑪": 39, "約": 43, "羅": 45, "林後": 47, "帖後": 53, "提後": 55, "門": 57, "來": 58, "彼後": 61, "約一": 62, "約二": 63, "約三": 64, "猶": 65, "啟": 66,
                "創世記": 1, "出埃及記": 2, "利未記": 3, "民數記": 4, "申命記": 5, "約書亞記": 6, "士師記": 7, "路得記": 8, "撒母耳記上": 9, "撒母耳記下": 10, "列王紀上": 11, "列王紀下": 12, "歷代誌上": 13, "歷代誌下": 14, "以斯拉記": 15, "尼希米記": 16 , "以斯帖記": 17, "約伯記": 18, "詩篇": 19, "傳道書": 21, "以賽亞書": 23, "耶利米書": 24, "以西結書": 26, "但以理書": 27, "何西阿書": 28, "約珥書": 29, "阿摩司書": 30, "俄巴底亞書": 31, "約拿書": 32, "彌迦書": 33, "那鴻書": 34, "哈巴谷書": 35, "西番雅書": 36, "哈該書": 37, "撒迦利亞書": 38, "瑪拉基書": 39, "馬太福音": 40, "馬可福音": 41, "約翰福音": 43, "使徒行傳": 44, "羅馬書": 45, "哥林多前書": 46, "哥林多後書": 47, "加拉太書": 48, "以弗所書": 49, "腓立比書": 50, "歌羅西書": 51, "帖撒羅尼迦前書": 52, "帖撒羅尼迦後書": 53, "提摩太前書": 54, "提摩太后書": 55, "提多書": 56, "腓利門書": 57, "希伯來書": 58, "雅各書": 59, "彼得前書": 60, "彼得後書": 61, "約翰一書": 62, "約翰二書": 63, "約翰三書": 64, "猶大書": 65, "啟示錄": 66,
                /// English
                genesis: 1, exodus: 2, leviticus: 3, numbers: 4, deuteronomy: 5, joshua: 6, judges: 7, ruth: 8, "1 samuel": 9, "2 samuel": 10, "1 kings": 11, "2 kings": 12, "1 chronicles": 13, "2 chronicles": 14, ezra: 15, nehemiah: 16, esther: 17, job: 18, psalms: 19, proverbs: 20, ecclesiastes: 21, "song of songs": 22, isaiah: 23, jeremiah: 24, lamentations: 25, ezekiel: 26, daniel: 27, hosea: 28, joel: 29, amos: 30, obadiah: 31, jonah: 32, micah: 33, nahum: 34, habakkuk: 35, zephaniah: 36, haggai: 37, zechariah: 38, malachi: 39, matthew: 40, mark: 41, luke: 42, john: 43, acts: 44, romans: 45, "1 corinthians": 46, "2 corinthians": 47, galatians: 48, ephesians: 49, philippians: 50, Colossians: 51, "1 thessalonians": 52, "2 thessalonians": 53, "1 timothy": 54, "2 timothy": 55, titus: 56, philemon: 57, hebrews: 58, james: 59, "1 peter": 60, "2 peter": 61, "1 john": 62, "2 john": 63, "3 john": 64, jude: 65, revelation: 66,
                "song of solomon": 22
            };
            
            /**
             * Convert Chinese numbers to Arabic numerals.
             *
             * @example convert_numbers("一")       /// Returns "1"
             * @example convert_numbers("十二")     /// Returns "12"
             * @example convert_numbers("三十")     /// Returns "30"
             * @example convert_numbers("四十五")    /// Returns "45"
             * @example convert_numbers("两百")     /// Returns "200"
             * @example convert_numbers("六百七")    /// Returns "670"
             * @example convert_numbers("六百七十")   /// Returns "670"
             * @example convert_numbers("六百七十八") /// Returns "678"
             * @example convert_numbers("六百零九")   /// Returns "609"
             * @example convert_numbers("创世记五十：十五") /// Returns "创世记50：15"
             * @param   str (string) The text to convert.
             * @return  A string containing the converted numbers, if any
             * @note    This only converts numbers less than one thousand.
             */
            function convert_numbers(str)
            {
                var val = {"一": 1, "二": 2, "两": 2, "兩": 2, "三": 3, "四": 4, "五": 5, "六": 6, "七": 7, "八": 8, "九": 9};
                
                ///TODO: Could also look to see if it is just a string of numbers and then treat it like a list of digits.
                return str.replace(/[一二三四五六七八九十百两兩零]+/g, function (hanzi)
                {
                    var char,
                        digits = [],
                        len = hanzi.length,
                        i,
                        place_holder = 1,
                        res = hanzi,
                        tmp_val;
                    
                    for (i = 0; i < len; i += 1) {
                        char = hanzi[i];
                        tmp_val = val[char];
                        
                        /// If the character has a value (i.e., 1-9), add it to the list of digits.
                        if (tmp_val) {
                            digits[digits.length] = {val: tmp_val, place: place_holder, char: char};
                            /// By default, we assume the digit will be in the ones column unless proven otherwise.
                            place_holder = 1;
                        } else {
                            /// 十 (shi) is special since it can stand alone too.
                            if (char === "十") {
                                /// Is it not first?
                                if (digits.length > 0) {
                                    /// Then it is a place marker for the previous digit.
                                    digits[digits.length - 1].place = 10;
                                } else {
                                    /// Otherwise it equals 10.
                                    digits[digits.length] = {val: 1, place: 10, char: char};
                                }
                                place_holder = 1;
                            } else if (char === "百" && digits.length > 0) {
                                /// 百 (bai) is always a place marker.
                                digits[digits.length - 1].place = 100;
                                /// We set the next digit to the tens column by default (e.g., 一百五 equals 150).
                                place_holder = 10;
                            } else if (char === "零") {
                                /// If we find 零 (ling), just reset and assume the next value will be in the ones column unless proven otherwise.
                                place_holder = 1;
                            }
                        }
                    }
                    
                    /// If it didn't find anything, just return the original value.
                    if (digits.length > 0) {
                        /// Now, just total the digits.
                        res = 0;
                        digits.forEach(function (digit)
                        {
                            res += digit.val * digit.place;
                        });
                    }
                    
                    return res;
                });
            }
            
            return function (ref)
            {
                var book,
                    chapter,
                    cv,
                    tmp_ref = "",
                    verse,
                    zeros;
                
                ///NOTE: Since 1st, 2nd, and 3rd John have Chinese numbers in them (e.g., "约一", "約翰二書", or "约翰三书"), we do not want to convert those number.
                ///      However, the book of John can also be referred to as "约" or "約," so you could have "约" plus a number (e.g., "约四" or "约三：五").
                ///      So we have to temporarily remove references to 1st, 2nd, and 3rd John, convert the numbers, and then add the reference back later.
                /// First, remove references to 1st, 2nd, and 3rd John.
                ref = ref.replace(/^[约約]翰?[一二三][书書]?(?![,.;:；：，。])/, function (john)
                {
                    tmp_ref = john;
                    return "";
                });
                
                /// Now, convert Chinese numbers into Arabic numerals (e.g., "创世记五十：十五" becomes "创世记50：15").
                /// Remove special Chinese words to allow for verse references like this "{book} 第一章".
                /// E.g., "创世记第五章十六节" first becomes "创世记第5章16节" and then becomes "创世记 5 16".
                ///NOTE: The space in " $1$2" is necessary so that two numbers do not get put together.
                ref = convert_numbers(String(ref)).replace(/第(\d+)[章首节節]?|第?(\d+)[章首节節]/g, " $1$2");
                
                /// Add back references to 1st, 2nd, and 3rd John, if any.
                ref = tmp_ref + ref;
                
                /// In order to check to see if the text matches a book, we have to remove any chapter and verse numbers.
                book = books[ref.replace(/\s*\d+(?:[,.;:；：，。\s]\d*)?$/, "").toLowerCase()];
                
                /// If it is not a verse reference, return 0 now.
                if (!book) {
                    return 0;
                }
                
                /// Set the default chapter and verse.
                chapter = "001";
                verse   = "001";
                
                /// Finally, we need to determine the chapter and/or verse reference is they are supplied.
                /// Create an array containing the starting chapter and verse (if any).
                /// Examples:
                ///    "Romans"        => ["Romans"]
                ///    "Romans 3"      => ["Romans", "3", undefined, ""]
                ///    "Romans 3:"     => ["Romans", "3", "",  ""]
                ///    "Romans 3:9"    => ["Romans", "3", "9", ""]
                ///    "Romans 3:9-"   => ["Romans", "3", "9", ""]
                ///    "Romans 3:9-18" => ["Romans", "3", "9", ""]
                ///NOTE: The plus (+) in [；：，。:.;,\s]+ is to match extra spacing possibly added by the first regular expression above.
                cv = ref.split(/\s*([0-9]{1,3})(?:[；：，。:.;,\s]+([0-9]{0,3})[\-0-9]*)?(?:[\d\W]+)?$/);
                
                if (cv.length > 1) {
                    /// Is the number a valid chapter?
                    if (cv[1] > 0) {
                        chapter = String(cv[1]);
                    } else {
                        chapter = "1";
                    }
                    
                    if (cv[2] !== "" && typeof cv[2] !== "undefined") {
                        verse = String(cv[2]);
                    } else {
                        /// For books with only 1 chapter, the chapter reference is optional (i.e., Jude 4 == Jude 1:4).
                        if (this.chapter_count[book] === 1) {
                            verse   = chapter;
                            chapter = "001";
                        }
                    }
                    /// Since verseID's require chapters and verses to be three digits, add in leading zeros, if necessary.
                    zeros   = ["", "00", "0", ""];
                    chapter = zeros[chapter.length] + chapter;
                    verse   = zeros[verse.length]   + verse;
                }
                
                return book + chapter + verse;
            };
        }()),
        
        /**
         * Prepares search terms to adhere to Sphinx syntax before submission to the server.
         *
         * Converts special words to symbols, and converts certain characters to a format adhere to Sphinx syntax.
         *
         * @example query = prepare_search("NOT in  the  AND good OR  beginning  ");  /// Returns "-in the & good | beginning  "
         * @example query = prepare_search("ps 16:title");                            /// Returns "ps 16:0"
         * @example query = prepare_search("“God is good”");                          /// Returns '"God is good"' (Note the curly quotes.)
         * @example query = prepare_search('he build El-beth-el "beth-el: because"'); /// Returns 'he build "El beth el" "beth el: because"' (Note the lack of hyphens and added quotes.)
         * @example query = prepare_search("rom 16:subscription");                    /// Returns "rom 16:255" (Verse 255 is used internally by BibleForge for Pauline subscriptions.)
         * @param   query (string) The terms to be examined.
         * @return  A string that conforms to Sphinx syntax.
         * @note    Called by preform_query() in js/main.js.
         * @note    Replaces AND, OR, and NOT with &, |, and - respectively.
         * @note    Replaces curly quotes with straight.
         * @note    Replaces various hyphens, dashes, and minuses with the standard hyphen (-).
         * @note    This function assumes that whitespace will be trimmed afterward.
         * @todo    Determine if this should be moved out of the language specific file (and maybe just use some language specific variables).
         */
        prepare_query: function (query)
        {
            ///NOTE: /\s+/g gets rid of double spaces within the words (e.g., "here    there" becomes "here there")
            ///      and converts all types of white space to the normal space (e.g., converts non-breaking spaces to normal spaces).
            ///NOTE: /\s+-\s+/g ensures that filter_array() will filter out negative words like "this - that" (i.e., "that" does not need to be highlighted).
            ///NOTE: .replace(/[\u2011－]/g, "-")                              converts non-breaking and fullwidth hyphens into normal hyphens.
            ///NOTE: .replace(/[\u00AD\u2012-\u2015]/g, "")                    removes soft hyphens (\u00AD) and various types of dashes.
            ///NOTE: .replace(/([0-9]+)[:.;,；。：，\s]title/ig, "$1:0")        replaces Psalm title references into an acceptable format (e.g., "Psalm 3:title" becomes "Psalm 3:0").
            ///NOTE: .replace(/([:.;,；。：，\s])subscript(?:ion)?/ig, "$1255") replaces the word "subscription" with the verse number (255) used internally by BibleForge for Pauline subscriptions (e.g., "Philemon subscription" becomes "Philemon 255").
            ///NOTE: "$1255" replaces the text with the first placeholder followed by the literal "255" (without quotes).
            ///NOTE: [\\、]+$ removes the trailing back slashes that are so easy to hit by accident when pressing Enter.
            return query.replace(/[０-９]/g, function (number)
            {
                /// Convert fullwidth numbers to normal numbers.
                return String.fromCharCode(number.charCodeAt(0) - 65248);
            }).replace(/[\\、]+$/, "").replace(/[、，丶]/g, ",").replace(" IN RED", " AS RED").replace(/\s+/g, " ").replace(/\sAND\s|\s*＆\s*/g, " & ").replace(/\sOR\s|\s*｜\s*/g, " | ").replace(/(?:\s[-－]|\s*\bNOT)\s/g, " -").replace(/[‘’]/g, "'").replace(/[“”]/g, "\"").replace(/[\u2011－]/g, "-").replace(/[\u00AD\u2012-\u2015]/g, "").replace(/([0-9]+)[:.;,；。：\s]title/ig, "$1:0").replace(/([:.;,；。：\s])subscript(?:ion)?/ig, "$1255").replace(/＊/g, "*")
                /// In order to handle hyphenated words correctly, we treat them as a quoted phrase.
                /// So we need to wrap hyphenated words in quotes (if they are not in a quotation already) and replace the hyphens with spaces.
               .replace(/"[^"]+"?|[^"\s]+/g, function (terms)
                {
                    var prefix = "";
                    
                    /// Is this a negative boolean?
                    /// E.g., "-not"
                    if (terms[0] === "-") {
                        /// Store the hyphen to be appended at the end.
                        prefix = "-";
                        /// Remove the leading hyphen so that it does not add extra space at the beginning after the hyphens are removed.
                        terms = terms.substring(1);
                    }
                    
                    /// Does the rest of the string have a hyphen in it not followed by a number?  If so, remove hyphens; if not, just return the original string.
                    ///NOTE: The reason for testing to see if there is a number is to leave verse ranges as is.
                    ///      E.g., '1:1-2' will not be changed, but 'Bethlehem-judah' will become '"Bethlehem judah"'.
                    if (/-(?!\d|$)/.test(terms)) {
                        /// Replace all hyphens with spaces and trim any possible space that might have been created.
                        /// In case a hyphen was surrounded by spaces, remove any spaces as well.
                        terms = terms.replace(/\s*-+(?!\d|$)\s*/g, " ").trim();
                        
                        /// Was this word not wrapped in double quotes.  If not, then it needs to be now in order to force the words to be found in order.
                        if (terms[0] !== "\"") {
                            terms = "\"" + terms + "\"";
                        }
                    }
                    
                    return prefix + terms;
                });
        },
        
        /**
         * Preform additional manipulations specific for search terms.
         *
         * @param terms (string) The text to segment.
         * @note  It is necessary to only segment search terms, not verse references, because segmentation could make it difficult to parse verse references.
         *        For example, a verse reference like "诗篇一百一十九：一百七十六" should not be segmented (particularly the numbers).
         */
        prepare_search_terms: function (terms)
        {
            ///NOTE: Because segment() is created after this file loads, we cannot directly set prepare_search_terms() to equal segment().
            /// The regular expression moves asterisks next to segmented words toward the left side.  (Punctuation will automatically connect toward the right if possible.)
            return segment(terms).replace(/\s+\*($|\s)/g, "*$1");
        },
        /**
         * Split up characters so that they can be highlighted properly.
         *
         * Since Chinese does not use spaces to delineate words, defining word boundaries (i.e., segmenting) is only half of the solution.
         * It is also necessary to break up each word into individual units so that a word can be searched for (and highlighted) by a single character.
         * In order to do this, we split up the words into pseudo HTML that just has enough data to be matched by the highlighter.
         *
         * @example BF.lang.separate_grams("<a id=1>上帝</a>"); /// Returns: "<a id=1>上<=1>帝</a>"
         * @param   html (string) The HTML to separate
         * @note    This operates on the same principle as replace_hyphens() (see main.js).
         */
        separate_grams: function (html)
        {
            /// Find all words that have more than one character (excluding punctuation).
            return html.replace(/=(\d+)>([^<]*[^　「『（…）；：，。？！」』、丶<]{2,}[^<]*)/g, function ()
            {
                /// arguments[0] = The entire string found.
                /// arguments[1] = The tag's ID.
                /// arguments[2] = The word
                
                /// Separate the characters and glue them back together with pseudo HTML.
                /// Create fullly formed HTML: return "=" + arguments[1] + ">" + arguments[2].replace(/([　「『（]*[^　「『（…）；：，。？！」』、丶](?![…）；：，。？！」』、丶]*$))/g, "$1</a><a id=" + arguments[1] + ">");
                return "=" + arguments[1] + ">" + arguments[2].replace(/([　「『（]*[^　「『（…）；：，。？！」』、丶](?![…）；：，。？！」』、丶]*$))/g, "$1<" + "=" + arguments[1] + ">");
            });
        },
    };
}(this));
